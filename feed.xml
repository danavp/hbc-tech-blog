<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.3">Jekyll</generator><link href="https://tech.hbc.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.hbc.com/" rel="alternate" type="text/html" /><updated>2018-07-19T16:49:36-05:00</updated><id>https://tech.hbc.com/</id><title>HBC Tech</title><subtitle>We power the website and mobile experiences for Saks,  Saks Off Fifth, Gilt, Lord &amp; Taylor and The Bay.
</subtitle><entry><title>Building A Better Keyboard Navigation</title><link href="https://tech.hbc.com/2018-05-30-ada-accessibility-and-keyboard-navigation.html" rel="alternate" type="text/html" title="Building A Better Keyboard Navigation" /><published>2018-05-30T00:00:00-05:00</published><updated>2018-05-30T00:00:00-05:00</updated><id>https://tech.hbc.com/ada-accessibility-and-keyboard-navigation</id><content type="html" xml:base="https://tech.hbc.com/2018-05-30-ada-accessibility-and-keyboard-navigation.html">&lt;p&gt;The simplest way to understand the importance of web accessibility is to open a web browser, put on a blindfold, and try navigating a website. Despite a small percentage of users with disabilities, their human right to navigate the internet still stands. In this post I’ll share some of my learnings from making our navigation more accessible.&lt;/p&gt;

&lt;h2 id=&quot;w3c-recommendations-for-accessibility&quot;&gt;W3C Recommendations for Accessibility&lt;/h2&gt;
&lt;p&gt;Not familiar with this type of work, I referred to &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#menu&quot;&gt;WAI-ARIA Authoring Practices&lt;/a&gt;, and found the following recommendations helpful. &lt;em&gt;Just in case, WAI stans for “Web Accessibility Initiative”, and ARIA stands for “Accessible Rich Internet Application”.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Leverage WAI-ARIA Roles, States, and Properties&lt;/li&gt;
  &lt;li&gt;Manage Focus Inside Composite Elements&lt;/li&gt;
  &lt;li&gt;All Components Need To Be Reachable Via The Keyboard&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-leverage-roles-states--properties&quot;&gt;1. Leverage Roles, States, &amp;amp; Properties&lt;/h3&gt;
&lt;p&gt;Landmark roles are defined by many of the &lt;a href=&quot;https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/landmarks/HTML5.html&quot;&gt;HTML5 elements&lt;/a&gt;. For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element gets the aria role &lt;code class=&quot;highlighter-rouge&quot;&gt;navigation&lt;/code&gt;, by default. These default roles aid assistive technologies used to browse web pages, but to make our markup more accessible, we need to also utilize aria states.&lt;/p&gt;

&lt;p&gt;Aria states like &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-haspopup&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; are what every screen reader dreams of. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-haspopup&lt;/code&gt; lets screen readers know there’s a submenu available. The &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; attribute will indicate to a screen reader that a menu is expanded or callapsed, it’s also great for applying UI changes with CSS, ie; opening and closing flyout menus that are being interacted with.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.nav_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;aria-expanded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When testing with screen readers, there were some less than useful audio feedback around the number of items in a popup menu. The screen reader didn’t make it completely clear how many items were being displayed in a submenu. This was caused by various levels of nested &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements. Stuck with our existing HTML markup for now, changing the role of each anchor element from &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;menuitem&lt;/code&gt; produced more relevant audio feedback. I raised the idea of ditching the traditional navigation &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; markup in favor of a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; containing a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements. Given everything has the correct aria attributes, I didn’t forsee any issues, but it seems the internet still favors &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; for nav structures.&lt;/p&gt;

&lt;h3 id=&quot;2-manage-the-focus-ring-own-it-dont-hide-it&quot;&gt;2. Manage the Focus Ring. (own it, don’t hide it)&lt;/h3&gt;
&lt;p&gt;Not every element on a page needs to be in the “tab order”, but all interactive elements should be focusable through scripting. It’s obviously not a good idea to manually set the ‘tab-index’ property, but setting it to ‘-1’ allows us to focus that element with javascript. Regardless if it’s a focusable elemement by default. Changing &lt;code class=&quot;highlighter-rouge&quot;&gt;tab-index&lt;/code&gt; from -1 to 0, or using the “Roving Tab Index”, is a great way to manage the focus ring and tab sequence. This also helps isolate parts of a form or a page into focusable groups, minimizing the number of tab stops to navigate. The other way is using the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-activedescendant&lt;/code&gt;, but the benefit of &lt;code class=&quot;highlighter-rouge&quot;&gt;tab-index&lt;/code&gt; is the user agent will scroll to bring the element into view if it’s not.&lt;/p&gt;

&lt;p&gt;WAI-ARIA Authoring Practices recommends the tab sequence should include only one focusable element of a composite UI component. Or, the element that is to be included in the tab sequence has tabindex of “0” and all other focusable elements contained in the composite component have tabindex of “-1”. For example, a nav item in a menu bar. Once a composite component contains focus, the menu bar in this case, pressing the enter key will shift focus to the first element inside of it and keys other than Tab and Shift + Tab will move focus among its focusable elements. See the section on “expected keyboard navigation” below.&lt;/p&gt;

&lt;p&gt;The important thing to highlight here, is that this technique removes unneccesary elements from the natural tab sequence, simplifying the user experience for keyboard users by not focusing every single element while tabing through a page. Instead, users can tab from component to component, choosing to dive deeper or move on. This creates a more efficient navigation and limits the number of key presses required to get to a specific part of the page. If a user is using a mouth stick to type, this is extemely helpful.&lt;/p&gt;

&lt;p&gt;You can learn more about this technique in &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_between&quot;&gt;5.5 Keyboard Navigation Between Components (The Tab Sequence)&lt;/a&gt;
and &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_general_within&quot;&gt;5.6 Keyboard Navigation Inside Components&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-create-expected-keyboard-navigation&quot;&gt;3. Create Expected Keyboard Navigation&lt;/h3&gt;
&lt;p&gt;When the user decides to dive deeper into a composite component, there are some standard key strokes and expected functionality. Some of these may not be familiar to mouse users, but are to users relying on the keyboard. W3C specifies the following keys and actions when developing a keyboard interface. A few have optional recommendations, but specify that it’s up to the author to decide. Bottom line here is to maintain a consistent functionality across your application and its composite components. Also, making sure to move the focus ring in an expected direction or location.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Key&lt;/th&gt;
      &lt;th&gt;Action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Space or Enter&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Opens the submenu and places focus on its first item.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Down Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Opens its submenu and places focus on the first item in the submenu.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Up Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the previous item, optionally wrapping from the first to the last.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Right Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the next item, optionally wrapping from the last to the first.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Left Arrow&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the previous item, optionally wrapping from the last to the first.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Home&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the first item in the current menu or menubar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;End&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the last item in the current menu or menubar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Any key&lt;/strong&gt; that corresponds to a printable character&lt;/td&gt;
      &lt;td&gt;Moves focus to the next menu item in the current menu whose label begins with that printable character.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Escape&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Closes the menu that contains focus and return focus to the element or context&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Tab&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the next element in the tab sequence, and if the item that had focus is not in a menubar, closes its menu and all open parent menu containers.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Shift + Tab&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Moves focus to the previous element in the tab sequence, and if the item that had focus is not in a menubar, closes its menu and all open parent menu containers.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For the full spec on keyboard navigation, you can refer to the W3C spec &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-11&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implementation-tid-bits&quot;&gt;Implementation Tid Bits&lt;/h3&gt;
&lt;p&gt;We started with the example scripts that W3C provides in their &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html&quot;&gt;menubar demos&lt;/a&gt;. These are free to use, fairly simple to follow and made a great starting point. The main class is applied during the React lifecycle at &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; and passed our navigation &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. It simply traverses the DOM for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements setting the appropriate states and attributes for each. We added a data-column attribute to our react template to help traverse back up the dom tree to easily provide users with the ability to navigate between columns using the left and right arrow keys.&lt;/p&gt;

&lt;p&gt;Below is a quick screen capture demonstrating the roving tab index technique.&lt;/p&gt;
&lt;video width=&quot;100%&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; name=&quot;keyboard navigation demo&quot; src=&quot;./assets/images/ada-keyboard-navigation/keyboard-navigation-demo.mov&quot; style=&quot;margin-top: 40px; border-bottom: solid 1px #ccc;&quot;&gt;&lt;/video&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In our submenus, few links in our small breakpoint menu are hidden from our large breakpoint. We needed a &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; to put a break in the order of operations so the browser would parse the CSS and then apply our keyboard navigation code. This allowed us to use ‘getComputedStyle()’ to skip over any elements that had &lt;code class=&quot;highlighter-rouge&quot;&gt;display: none;&lt;/code&gt;. Otherwise, the hidden elements broke our tab sequence because the script indexed the hidden anchor elements in the DOM. Because they were hidden there was nothing to focus next in the tab order.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; was needed to properly focus the first item when a submenu was opened. This was because of our “fancy” transition on the submenu &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity: 0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;opactiy: 1&lt;/code&gt;. A similar problem again, focusing an item isn’t possible if it’s hidden, so we needed to pause our script to let that transition to run, allow the browser to render the changes and report them back, allowing javascript to get the latest, updated styles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having 2 actions for each nav item, one for the category landing page, and the other for the popup. This isn’t apparent when using a mouse and having the hover effect, but with just a keyboard, it needs to be clear to the user that there are 2 options. For now, we’ve styled the element with a down arrow when it’s in focus, gave the element a role of &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;, and an attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-haspopup&lt;/code&gt;. This provides visual and audio feedback. Optionally, and perhaps a future improvement would be to create a second element to focus and control the popup menu, separating it from the link to the category page. The W3C provides their own guidance on this &lt;a href=&quot;https://www.w3.org/WAI/tutorials/menus/flyout/#flyoutnavkbbtn&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Smaller breakpoints still need to be included and we have to go back and work on this. It’s possible a user may have a bluetooth keyboard connected to a tablet.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusions--next-steps&quot;&gt;Conclusions &amp;amp; Next Steps&lt;/h3&gt;
&lt;p&gt;It’s fairly easy to make your site’s navigation more keyboard friendly and there are some great resources from the Web Accessibility Initiative that will help you do it. Going through this exercise exposed a few areas we could apply this same logic and improve our site’s overall accessibility. This work also highlighted the need to internally communicate this perspective in our &lt;a href=&quot;https://styleguide.hbc.com&quot;&gt;styleguide&lt;/a&gt; so our design and development teams can make sure we build things in an accessible way. We’ll be launching our new header for &lt;a href=&quot;thebay.com&quot;&gt;thebay.com&lt;/a&gt; in the coming months and eventually to all our sites.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Web Accessibility is a human right&lt;/li&gt;
  &lt;li&gt;Create efficient keyboard navigation patterns&lt;/li&gt;
  &lt;li&gt;Limit the number of key presses required to get to a specific part of the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you’re updating your site’s navigation, hopefully what we’ve shared from our experience will help you make your nav more accessible to users who rely on a keyboard to surf the web.&lt;/p&gt;</content><author><name>[&quot;Jaret Stezelberger&quot;]</name></author><category term="WAI-ARIA" /><category term="Accessibility" /><category term="Navigation" /><category term="ADA" /><category term="Javascript" /><summary>The simplest way to understand the importance of web accessibility is to open a web browser, put on a blindfold, and try navigating a website. Despite a small percentage of users with disabilities, their human right to navigate the internet still stands. In this post I’ll share some of my learnings from making our navigation more accessible.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tech.hbc.com{&quot;feature&quot;=&gt;&quot;ada-keyboard-navigation/senses.png&quot;, &quot;credit&quot;=&gt;&quot;Photo by Dan Gold on Unsplash&quot;, &quot;creditlink&quot;=&gt;&quot;https://unsplash.com/photos/NiNmbsheZIg&quot;}" /></entry><entry><title>ODSC Workshop on Experimental Reproducibility in Data Science</title><link href="https://tech.hbc.com/2018-05-07-experimental-reproducibility-in-data-science.html" rel="alternate" type="text/html" title="ODSC Workshop on Experimental Reproducibility in Data Science" /><published>2018-05-07T00:00:00-05:00</published><updated>2018-05-07T00:00:00-05:00</updated><id>https://tech.hbc.com/experimental-reproducibility-in-data-science</id><content type="html" xml:base="https://tech.hbc.com/2018-05-07-experimental-reproducibility-in-data-science.html">&lt;p&gt;On May 2nd, we presented at the &lt;a href=&quot;https://odsc.com/boston&quot;&gt;Open Data Science Conference&lt;/a&gt; in Boston, MA. We demonstrated 
how to build a machine learning project from scratch with &lt;a href=&quot;https://github.com/IDSIA/sacred&quot;&gt;Sacred&lt;/a&gt;, an open source 
library for experiment tracking, and how to view the results using 
&lt;a href=&quot;https://github.com/chovanecm/sacredboard&quot;&gt;Sacredboard&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;workshop-abstract&quot;&gt;Workshop Abstract&lt;/h1&gt;

&lt;p&gt;There are ways to incorporate experimental reproducibility into machine learning projects that are clean and lightweight.
In this introductory level workshop, we demonstrate how to use Sacred to motivate reproducible research and 
experiment monitoring in machine learning. We discuss how this enables any data scientist to provide a solution 
(a model or set of predictions) to any problem, compare their solution to previous models results on the same test 
data, and select the best model for production. Finally, we provide examples of machine learning problems in retail 
and demonstrate how data scientists can easily work across multiple problems.&lt;/p&gt;

&lt;h1 id=&quot;what-is-experimental-reproducibility&quot;&gt;What is Experimental Reproducibility&lt;/h1&gt;

&lt;p&gt;Specifying the inputs, contexts, and steps involved in producing a result such that one can execute those
instructions &lt;em&gt;and&lt;/em&gt; produce the same result.&lt;/p&gt;

&lt;h1 id=&quot;machine-learning-is-experiments&quot;&gt;Machine Learning is Experiments&lt;/h1&gt;

&lt;p&gt;You might be thinking, what is the connection between machine learning and experiments? Well, every time we build a 
model, we’re making hypotheses on which data to use for training and testing, pre-processing steps to apply, features 
and/or architectures to engineer, and learning algorithm(s) to use that will best fit our training data and generalize 
to unseen data.&lt;/p&gt;

&lt;p&gt;Additionally, we’re running these experiments from dynamic and (sometimes) complex code bases, on computing environments
with a whole another host of specifications.&lt;/p&gt;

&lt;p&gt;So, while we are not working in a wetlab, we’re definitely running experiments and making many decisions that should 
be recorded!&lt;/p&gt;

&lt;h1 id=&quot;why-do-we-need-an-approach-to-this&quot;&gt;Why do we need an approach to this&lt;/h1&gt;

&lt;p&gt;Adhoc efforts at tracking experiments are &lt;strong&gt;incomplete&lt;/strong&gt;, and &lt;strong&gt;messy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incomplete&lt;/strong&gt;: It becomes very hard to annotate everything that we want to track: the version of the code we’re 
running; logging the config that we’re using for a particular run of an experiment (from the steps used for 
preprocessing to the hyperparameters used in the model); the specifications of the host where the experiment is run; 
and so on…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Messy&lt;/strong&gt;: We want this information to be logged in such a way that we can easily add new parameters to track (without 
having to change a lot of code) and search through experiments that we’ve already tried. Looking through pages of a 
notebook, or scanning excel sheets stored in various folders is not an efficient and desirable way to do this.&lt;/p&gt;

&lt;h1 id=&quot;what-should-we-track-to-make-machine-learning-reproducible&quot;&gt;What should we track to make Machine Learning reproducible?&lt;/h1&gt;

&lt;p&gt;We suggest tracking the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Version Control: What is the git hash of the repository when we run the experiment? Is the code that was run in a 
&lt;em&gt;dirty&lt;/em&gt; state (some local changes)? To take this a step further, can we just store the source code that we ran?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Config: This might include (but is not limited to) which data is loaded for training/testing, preprocessing steps, 
learning algorithms, hyperparameters, etc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Seed: Set/store a global seed so that any functions that have some randomness yield consistent results.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results: Store the performance of each run so that we can compare different experimental runs
and select the best model. For certain models, we may also want to track its performance for each training 
step.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enter-sacred&quot;&gt;Enter Sacred&lt;/h1&gt;

&lt;p&gt;Sacred makes this possible. Sacred is a tool that is designed to introduce experimental reproducibility into 
projects with very little overhead. There’s 3 actors in the Sacred ecosystem: &lt;strong&gt;Ingredients&lt;/strong&gt;, &lt;strong&gt;Experiments&lt;/strong&gt;, and 
&lt;strong&gt;Observers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can define &lt;strong&gt;Ingredients&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sacred&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ingredient&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ingredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@name_ingredient.config&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Jane&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@name_ingredient.capture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Jane&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can define an &lt;strong&gt;Experiment&lt;/strong&gt; that uses Ingredients to produce some outcome that we wish to record:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sacred&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;my_ingredients&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullname&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;greeting_ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'greeting_experiment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_ingredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@greeting_ex.config&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@greeting_ex.automain&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can run this experiment from the command line with an &lt;strong&gt;Observer&lt;/strong&gt; (e.g. a mongo server), which will record 
everything we have explicitly indicated that we wish to track (any parameter defined in a function with an 
&lt;code class=&quot;highlighter-rouge&quot;&gt;@Ingredient.config&lt;/code&gt; decorator), along with what Sacred implicitly tracks (source code, version control info, seed, 
host info, etc). Assuming the experiment code above is written in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;greeting_experiment.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python greeting_experiment.py &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; sacred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-m sacred&lt;/code&gt; parameter specifies that the observer should record everything to the sacred db in a local mongo 
instance. Sacred has a powerful command line tool in which we can modify the values of parameters before an experiment 
run.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python greeting_experiment.py &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; sacred with greeting_experiment.greeting&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Goodbye
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return the result &lt;code class=&quot;highlighter-rouge&quot;&gt;Goodbye, Jane Doe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sacred is an extremely lightweight and powerful tool - we urge you to check out 
&lt;a href=&quot;https://github.com/IDSIA/sacred&quot;&gt;Sacred&lt;/a&gt;, and our presentation materials for more examples of how to use Sacred in 
machine learning with a variety of examples including hyperparmater optimization and model blending.&lt;/p&gt;

&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;/h2&gt;

&lt;p&gt;Examples using Sacred to do reproducible machine learning on &lt;a href=&quot;https://www.kaggle.com/c/titanic&quot;&gt;titanic survivorship&lt;/a&gt; 
are available here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gilt/odsc-2018&quot;&gt;Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gilt/odsc-2018/blob/master/slides.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;Karthik Rajasethupathy&quot;, &quot;Jason Tam&quot;]</name></author><category term="sacred" /><category term="data science" /><category term="python" /><category term="odsc2018" /><category term="workshop" /><category term="conferences" /><summary>On May 2nd, we presented at the Open Data Science Conference in Boston, MA. We demonstrated 
how to build a machine learning project from scratch with Sacred, an open source 
library for experiment tracking, and how to view the results using 
Sacredboard.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tech.hbc.com{&quot;feature&quot;=&gt;&quot;experimental-reproducibility/experimental-reproducibility-unsplash.jpg&quot;, &quot;credit&quot;=&gt;&quot;Photo by Katie Smith on Unsplash&quot;, &quot;creditlink&quot;=&gt;&quot;https://unsplash.com/photos/uQs1802D0CQ&quot;}" /></entry><entry><title>Why you should volunteer for Smart Futures</title><link href="https://tech.hbc.com/2018-04-20-smart-futures.html" rel="alternate" type="text/html" title="Why you should volunteer for Smart Futures" /><published>2018-04-20T00:00:00-05:00</published><updated>2018-04-20T00:00:00-05:00</updated><id>https://tech.hbc.com/smart-futures</id><content type="html" xml:base="https://tech.hbc.com/2018-04-20-smart-futures.html">&lt;p&gt;Dublin is a great place for volunteering in Tech initiatives !&lt;/p&gt;

&lt;p&gt;Two years ago I started mentoring in a &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt;, and, at HBC we recently joined the &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; initiative.&lt;/p&gt;

&lt;p&gt;So, I want to share with you some volunteering tips, lessons learned along the way, and why we joined &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-to-pick-an-initiative&quot;&gt;How to pick an initiative&lt;/h1&gt;

&lt;p&gt;With so many great tech initiatives out there and limited time to contribute, it can be a tough choice for a volunteer to pick one (or a few) initiatives to get involved with.&lt;/p&gt;

&lt;p&gt;Different initiatives target different issues (e.g. diversity, education) and as a volunteer your tasks will vary (e.g. teaching children, presenting to adults, organising events).&lt;/p&gt;

&lt;h2 id=&quot;4-questions-to-ask-yourself&quot;&gt;4 questions to ask yourself&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;answers should be very subjective but I included mine for reference&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What issues matter the most to me ?&lt;/p&gt;

    &lt;p&gt;Students choosing CS (Computer Science) in college do not have a concrete idea of what CS is.&lt;/p&gt;

    &lt;p&gt;I found that many class-mates were deceived as they had a false and stereotypical expectation of what CS would be. On the other side, many highschool class-mates never even considered CS either (for the same reason) and might have missed a passion!&lt;/p&gt;

    &lt;p&gt;Therefore, I want to educate students about CS to break stereotypes and allow them to make an informed choice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How can I address those issues ?&lt;/p&gt;

    &lt;p&gt;I can use my CS knowledge and experience working in Tech to inform students&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do I have other expectations about my volunteering experience ?&lt;/p&gt;

    &lt;p&gt;I like teaching, explaining to children and presenting in general&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is there an existing initiative aligning with my goals and expectations ?&lt;/p&gt;

    &lt;p&gt;Yes, at least 2 that I know of: &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; and &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;starting-your-own&quot;&gt;Starting your own&lt;/h2&gt;

&lt;p&gt;Joining an existing initiative is great: you get to learn from volunteers with more experience and the overhead of running an association (e.g. paperwork) is done for you.&lt;/p&gt;

&lt;p&gt;But.. depending on where you live / where you work, there might not be an option that suits you. And in the case that you are starting your own: many initiatives make resources available to the public through their website, and you can connect with their community of volunteers through their communication channels (&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; / email).&lt;/p&gt;

&lt;p&gt;Some initiatives like &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; are international initiatives and will help you set up your own coding classes.&lt;/p&gt;

&lt;h1 id=&quot;what-is-smart-futures&quot;&gt;What is Smart Futures&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;’ objective is getting children interested in &lt;a href=&quot;https://en.wikipedia.org/wiki/Science,_technology,_engineering,_and_mathematics&quot;&gt;S.T.E.M&lt;/a&gt; subjects in secondary school and at third level.
It is coordinated by the &lt;a href=&quot;http://www.sfi.ie/&quot;&gt;Science Foundation Ireland&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of events:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you contacting directly schools or highschools to give talks / presentations / workshops to classes, the format is free&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; asking you to send some volunteers to participate at events they are organising (occasional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have no obligations of frequency, you only have to contact &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; when you give a presentation to a school to help them map what schools are getting visited.&lt;/p&gt;

&lt;h1 id=&quot;why-its-important&quot;&gt;Why it’s important&lt;/h1&gt;

&lt;h2 id=&quot;students-want-to-fit-in&quot;&gt;Students want to fit in&lt;/h2&gt;

&lt;p&gt;In a &lt;a href=&quot;http://www.smartfutures.ie/sites/default/files/resources/STEM%20survey%20results%20infographic%20update.pdf&quot;&gt;survey&lt;/a&gt;, &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; asked 2,000 first year students across Ireland about what influenced them when selecting their college course:
62% of student said ‘fitting in’ was the main reason for their choice !&lt;/p&gt;

&lt;p&gt;You can help break stereotypes; make students see the vast range of careers in S.T.E.M. There are so many radically different careers in Technology alone it is hard to imagine that someone would not ‘fit in’, but it is also very hard to picture some of those roles as a child (without an awesome volunteer to help).&lt;/p&gt;

&lt;h2 id=&quot;children-need-role-models&quot;&gt;Children need role models&lt;/h2&gt;

&lt;p&gt;Diversity has been a main topic in Tech industry issues related talks in the past few years. &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; have shown in their 2017 &lt;a href=&quot;https://coderdojo.com/news/2018/03/26/coderdojo-annual-survey-results-2017/&quot;&gt;survey&lt;/a&gt; that the percentage of girl students (29%) match the number of girl mentors (29%) and they were left wondering if there was some correlation..&lt;/p&gt;

&lt;p&gt;Children want to identify with their role models; the example above is about gender but we need mentors with all kinds of personalities and backgrounds.&lt;/p&gt;

&lt;h2 id=&quot;going-to-the-schools&quot;&gt;Going to the schools&lt;/h2&gt;

&lt;p&gt;Events and coding classes need to be very well advertised to appeal to children that have no interest in Tech (yet) or ‘non Tech-aware’ parents. Going to the classes you are talking to everyone, including these students! It is truly a unique chance for them.&lt;/p&gt;

&lt;p&gt;To quote the &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt; website:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Many students have no access to anyone working in science and technology, or may not know anyone that went to college.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;our-experience&quot;&gt;Our experience&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://ie.linkedin.com/in/jakewhelan&quot;&gt;Jake Whelan&lt;/a&gt; and I have given 2 presentations to classes of ~50 children aged 10-11, here’s some take-aways from  preparing and giving those presentations.&lt;/p&gt;

&lt;h2 id=&quot;presentation-format&quot;&gt;Presentation format&lt;/h2&gt;

&lt;p&gt;The presentation format is not enforced by &lt;a href=&quot;http://www.smartfutures.ie/&quot;&gt;Smart Futures&lt;/a&gt;, although there is an &lt;a href=&quot;http://www.smartfutures.ie/sites/default/files/resources/Sample%20%20Smart%20Futures%20School%20%20Presentation%20Template.pdf&quot;&gt;example&lt;/a&gt; on their website.&lt;/p&gt;

&lt;p&gt;Nonetheless: personalise it to create a format that works for you, make it interactive and adapt the presentation to the age of your audience (a 10 yrs old is probably not interested in eCommerce)&lt;/p&gt;

&lt;h2 id=&quot;should-you-talk-about-your-company-&quot;&gt;Should you talk about your company ?&lt;/h2&gt;

&lt;p&gt;Children want concrete examples, and it is easy to go in details when talking about your daily life.&lt;/p&gt;

&lt;p&gt;However, you need to take your audience into consideration. For example: our roles are linked to online shopping; but a 10-11 yrs old will probably never have purchased anything on an eCommerce website!&lt;/p&gt;

&lt;p&gt;We decided to let the children know they could ask questions about applications unrelated to eCommerce that they use every day (e.g. in these classes Snapchat was very popular).&lt;/p&gt;

&lt;h2 id=&quot;dont-be-shy-show-some-code&quot;&gt;Don’t be shy: show some code!&lt;/h2&gt;

&lt;p&gt;We firmly believe that showing a simple snippet of code, explaining in details pieces of logic, asking the students questions about it and making them guess what specific parts are doing, is key to demystify what application development really is.&lt;/p&gt;

&lt;p&gt;But first you need to introduce the concept of coding itself, so here’s a rough transcript of how we explained it to 10-11 yrs old:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When talking to a person you use a language to communicate ideas to that person. There are many “human languages”: Irish, English, French.. 
But a machine only understands 0s and 1s and it would be very hard for humans to communicate ideas only using 0s and 1s; so, coding languages were created: an intermediate that follows very strict rules for the machine to be able to convert it to 0s and 1s and just like in “human languages”, there are many coding languages: JavaScript, Python, Scala, Java etc..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our coding example is a little game, which is based on a very simplified version of &lt;a href=&quot;orteil.dashnet.org/cookieclicker/&quot;&gt;Cookie clicker&lt;/a&gt; (it was very popular among children 1-2 yrs ago).&lt;/p&gt;

&lt;p&gt;A web-page shows a cookie and a number that increments every time you click on the it. We spend as much time as needed an let the children ask all the questions they have in order to understand how the code works.&lt;/p&gt;

&lt;p&gt;2 questions we got:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Do you have to learn all the different languages ?&lt;/p&gt;

    &lt;p&gt;Great occasion to point out that languages are very similar in their structure and follow the same logic&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why do the words have different colors ?&lt;/p&gt;

    &lt;p&gt;Coding languages follow very specific rules so each word has a role like variables, values, keywords etc.. just like we have verbs, nouns and adverbs! So the text editors we use color the words for us to help differentiate between the different roles.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is very encouraging to hear such practical questions being asked (like they could picture themselves coding already!)&lt;/p&gt;

&lt;p&gt;The goal of this little example is not to teach them how to code but to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;see a very concrete example (write code and see the result on the web page)&lt;/li&gt;
  &lt;li&gt;demystify code&lt;/li&gt;
  &lt;li&gt;explain some concepts that are the building blocks of coding, like conditions and variables; which can be used later-on to give concrete explanations about how certain features of the applications they are familiar with, work (at a high level)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the code for the game on &lt;a href=&quot;https://github.com/jakewhelan/sfi-cookie-clicker/&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;make-some-time-at-the-end&quot;&gt;Make some time at the end&lt;/h2&gt;

&lt;p&gt;We always make sure to leave at least 1/3 of the time for questions at the end. The questions can be about anything!&lt;/p&gt;

&lt;p&gt;You showed code and the children now have a concrete idea of what development is like. What should happen is that they want to tie-up what they just learned with applications they are familiar with.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;e.g. How does a website know my username is already taken when I create an account ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Children will have a concept of storing files in a computer (which can be used to explain databases), and, thanks to the previous demo they now have an understanding of conditionals and variables ! That is enough to explain many features at a high level.&lt;/p&gt;

&lt;p&gt;This “Ask me anything” session at the end does a good job at shifting the way the students look at applications they use every day: now they do not accept them to be “black-boxes” anymore and look to understand how they work.&lt;/p&gt;

&lt;h2 id=&quot;follow-up&quot;&gt;Follow up&lt;/h2&gt;

&lt;p&gt;Send resources to the teachers after the presentation, you might have sparked interests for programming so make sure they know where to go.&lt;/p&gt;

&lt;p&gt;My favorites are &lt;a href=&quot;https://code.org/&quot;&gt;Code.org&lt;/a&gt; and &lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt;, but I also recommend children to ask their parents to sign them up for &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt; (which is free)&lt;/p&gt;

&lt;h1 id=&quot;how-do-i-get-involved&quot;&gt;How do I get involved&lt;/h1&gt;

&lt;p&gt;You can get involved individually or as a company by contacting &lt;a href=&quot;smartfutures@sfi.ie&quot;&gt;smartfutures@sfi.ie&lt;/a&gt;, you will be invited to a presentation about the initiative and be registered as a volunteer.&lt;/p&gt;

&lt;h1 id=&quot;help-us-find-schools&quot;&gt;Help us find schools&lt;/h1&gt;

&lt;p&gt;If you are a parent, or part of a school council, you can help us by reaching out to teachers/principals who would be interested in having us present to their students (in the Dublin area).&lt;/p&gt;</content><author><name>Daniel Mateus Pires</name></author><category term="stem" /><category term="initiatives" /><category term="children" /><category term="volunteering" /><summary>Dublin is a great place for volunteering in Tech initiatives !</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tech.hbc.com{&quot;feature&quot;=&gt;&quot;smart-futures/smart-futures-unsplash.jpg&quot;, &quot;credit&quot;=&gt;&quot;Photo by pan xiaozhen on Unsplash&quot;, &quot;creditlink&quot;=&gt;&quot;https://unsplash.com/photos/R4FEbUWOTPQ?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;}" /></entry><entry><title>A Non-Technical Guide to Posting to the Tech Blog</title><link href="https://tech.hbc.com/2018-04-12-non-technical-guide-to-posting-to-the-blog.html" rel="alternate" type="text/html" title="A Non-Technical Guide to Posting to the Tech Blog" /><published>2018-04-12T00:00:00-05:00</published><updated>2018-04-12T00:00:00-05:00</updated><id>https://tech.hbc.com/non-technical-guide-to-posting-to-the-blog</id><content type="html" xml:base="https://tech.hbc.com/2018-04-12-non-technical-guide-to-posting-to-the-blog.html">&lt;p&gt;Our tech organization is obviously made up of more than just developers.  Non-developers have great insight from their work too! This post is a nudge to all my fellow colleagues who are also doing amazing work and would like to share, but feel intimitated by the pull request process.&lt;/p&gt;

&lt;p&gt;Are you a techie? We have a guide for developers &lt;a href=&quot;https://github.com/saksdirect/hbc-tech-blog/blob/master/docs/contributing.md&quot;&gt;here&lt;/a&gt;, for everyone else, read on.&lt;/p&gt;

&lt;h2 id=&quot;step-1-write-your-post&quot;&gt;Step 1: Write Your Post&lt;/h2&gt;

&lt;p&gt;Writing is probably the hardest part of this whole thing. All you need to do is open a new Google Doc and type one letter after the other. Organize your thoughts by utilizing built in text headings; ie: bulleted lists, and text styles already available in Google Docs. As an example, take a look at &lt;a href=&quot;https://docs.google.com/document/d/1Gdu5oIoqV7FuIdjkWK8rshUEeBPQ0uUm2RZ3RuPc850/edit?usp=sharing&quot;&gt;the doc used to create this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/headings.png&quot; alt=&quot;Sample Headings&quot; title=&quot;Sample Headings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-add-some-images&quot;&gt;Step 2: Add Some Images&lt;/h2&gt;

&lt;p&gt;People like pictures! Illustrate your ideas with a few images, screen captures, or even cat GIFs if appropriate. Insert your images via the toolbar in Google Docs, but keep the original assets handy, we’ll need to upload them to Github and adjust the image paths later. Don’t worry about the technical stuff yet, just keep writing.&lt;/p&gt;

&lt;h2 id=&quot;step-3-convert-your-google-doc-to-markdown&quot;&gt;Step 3: Convert Your Google Doc to Markdown&lt;/h2&gt;

&lt;p&gt;The Markdown stuff helps some web applications format text, create links, and embed images. Don’t be scared, most of the conversion can be automated for you. There is a Google Docs Add-on called, you guessed it, Google Docs To Markdown, or GD2md for short. Follow &lt;a href=&quot;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf?utm_source=permalink&quot;&gt;this link&lt;/a&gt; to add it to your Google Drive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf?utm_source=permalink&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/gd-to-md.png&quot; alt=&quot;gd-to-md&quot; title=&quot;gd-to-md&quot; class=&quot;center-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;when-youre-happy-with-what-youve-written-follow-the-steps-below&quot;&gt;When you’re happy with what you’ve written, follow the steps below:&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From the Google Docs &lt;strong&gt;Add-ons&lt;/strong&gt; menu, select &lt;strong&gt;GD2md-html &amp;gt; Convert&lt;/strong&gt;. The sidebar window opens.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Markdown button in the sidebar window to convert your document to Markdown. If you select part of the document, GD2md-html will convert only the selection. Otherwise it will convert the entire document. Click the Docs link for more information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preview your post by copying and pasting the text from the sidebar into an online editor like &lt;a href=&quot;https://stackedit.io/&quot;&gt;Stack Edit&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll see there are a few extra lines of text added during the conversion. These can safely be removed, as they’re just warnings about image paths needing to be corrected. We’ll tackle these changes later.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-4-add-some-yaml&quot;&gt;Step 4: Add Some YAML&lt;/h2&gt;

&lt;p&gt;We use YAML formatting to store information about each post ie: title, post date, category, etc. Copy the snippet below and change the values according to your post. &lt;em&gt;(make sure to copy the 3 dashes at the beginning and ending)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: A Non-Technical Guide to Posting to the Tech Blog.
description: Step by step instructions explaining how to post to the tech blog without requiring a degree in computer science.
author: Jaret Stezelberger
date: 2018-04-12
categories:
- Culture
tags: 
- Tech Blog
- How To
- Culture
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-5-upload-everything-to-github&quot;&gt;Step 5: Upload Everything To Github&lt;/h2&gt;

&lt;p&gt;If you don’t already have GitHub account, get one &lt;a href=&quot;https://github.com/&quot;&gt;here&lt;/a&gt;. It’s the modern library card! Once you’re signed into your Github Account, you’re just a few simple steps away from posting.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy (Fork) HBC Tech Blog To Your GitHub Account&lt;/li&gt;
  &lt;li&gt;Create A Copy For Your New Work (Create a New Branch)&lt;/li&gt;
  &lt;li&gt;Add Your Post File and Then Save (Commit) it&lt;/li&gt;
  &lt;li&gt;If Needed, Upload A Folder of Assets (Another Commit)&lt;/li&gt;
  &lt;li&gt;Let The Team Know You’re Ready to Publish (Create A New Pull Request in GitHub)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;heres-a-closer-look-at-those-steps-one-by-one&quot;&gt;Here’s a closer look at those steps one by one:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 5.1&lt;/strong&gt; Fork It&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/01-fork-button.png&quot; alt=&quot;Fork The Blog Repo&quot; title=&quot;Fork the Blog Repo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.2&lt;/strong&gt; Create A Branch For Your New Post&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/02-create-new-branch.png&quot; alt=&quot;Create A New Branch&quot; title=&quot;Create A New Branch&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.3&lt;/strong&gt; Navigate to the Posts Folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/03-navigate-to-posts-directory.png&quot; alt=&quot;Navigate to the Posts Directory&quot; title=&quot;Navigate to the Posts Directory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.4&lt;/strong&gt; Create Your Post File&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/04-create-new-file.png&quot; alt=&quot;Create a New File&quot; title=&quot;Create a New File&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.5&lt;/strong&gt; Save Your Changes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/05-commit-new-file.png&quot; alt=&quot;Commit Your File&quot; title=&quot;Commit Your File&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.6&lt;/strong&gt; Add Your Images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/06-navigate-to-images-directory.png&quot; alt=&quot;Navigate to the Images Directory&quot; title=&quot;Navigate to the Images Directory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.7&lt;/strong&gt; Upload your images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/07-upload-your-images.png&quot; alt=&quot;Upload Your Images&quot; title=&quot;Upload Your Images&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.8&lt;/strong&gt; Update Image Your Paths&lt;/p&gt;

&lt;p&gt;In the previous step, converting your Google Doc to Markdown, image paths were set with placeholders. You’ll need to change these to correctly match the &lt;strong&gt;folder&lt;/strong&gt; and &lt;strong&gt;file&lt;/strong&gt; names you’ve uploaded to GitHub.&lt;/p&gt;

&lt;p&gt;In our example above they would change from:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![alt_text](images/blog-post-how-to0.png &quot;image_tooltip&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Fork The Blog Repo](./assets/images/blog-post-how-to/01-fork-button.png &quot;Fork the Blog Repo&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.9&lt;/strong&gt; Create a New Pull Request&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/08-create-pull-request.png&quot; alt=&quot;Create Your Pull Request&quot; title=&quot;Create Your Pull Request&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Hopefully, after reading this post, the tech blog has been demystified and the few technical things around markdown conversion and fixing image paths won’t scare you away. If you get stuck, try looking for your answer in the documentation &lt;a href=&quot;https://github.com/saksdirect/hbc-tech-blog/blob/master/docs/contributing.md&quot;&gt;here&lt;/a&gt;. If you need help with Markdown, there are a ton of resources online. &lt;a href=&quot;https://stackedit.io/&quot;&gt;Stack Edit&lt;/a&gt; is your friend.&lt;/p&gt;</content><author><name>[&quot;Jaret Stezelberger&quot;]</name></author><category term="Tech Blog" /><category term="Culture" /><summary>Our tech organization is obviously made up of more than just developers.  Non-developers have great insight from their work too! This post is a nudge to all my fellow colleagues who are also doing amazing work and would like to share, but feel intimitated by the pull request process.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tech.hbc.com{&quot;feature&quot;=&gt;nil, &quot;credit&quot;=&gt;nil, &quot;creditlink&quot;=&gt;nil}" /></entry><entry><title>Brand Alerts V2: Breaking Down a Monolith with AWS</title><link href="https://tech.hbc.com/2018-04-02-brand-alerts-v2-breaking-down-a-monolith-with-aws.html" rel="alternate" type="text/html" title="Brand Alerts V2: Breaking Down a Monolith with AWS" /><published>2018-04-02T00:00:00-05:00</published><updated>2018-04-02T00:00:00-05:00</updated><id>https://tech.hbc.com/brand-alerts-v2-breaking-down-a-monolith-with-aws</id><content type="html" xml:base="https://tech.hbc.com/2018-04-02-brand-alerts-v2-breaking-down-a-monolith-with-aws.html">&lt;p&gt;Recently, team T-Rex worked on the re-architecture of the
Brand Alerts back end system, a project which we named Brand Alerts V2.
In this blog, I share our new architecture detailing some of the new AWS
powered components.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Brand Alerts V2 breaks down the monolithic architecture of Brand Alerts
V1, into small, independent micro services. It enhances flexibility and
extensibility of the system, not to forget, facilitates agile development,
continuous integration and delivery. It also addresses some of our recent
pain points- database and thread scheduling issues, resulting at times
in non delivery of brand alert emails. Our intent was to delegate much
of the boilerplate work to AWS tools and services, which are built to
handle these use cases in tried and tested fashion and at scale.&lt;/p&gt;

&lt;h1 id=&quot;what-are-brand-alerts&quot;&gt;What Are Brand Alerts?&lt;/h1&gt;

&lt;p&gt;Before I go any further, let me describe what Brand Alerts are.&lt;/p&gt;

&lt;p&gt;Brand Alerts are emails sent to Gilt members notifying them of an upcoming
sale on a brand of their liking. A brand alert email is the ideal way to
beat the crowd and avail deep discounts on high-end fashion
brands. A typical brand alert email is sent in the evening (usually
around 6 PM) a day prior to when the brand goes on sale.&lt;/p&gt;

&lt;p&gt;It should also be noted that Brand Alert emails have one of the highest
click-through rates (among all our triggered emails) and so business is
always looking to enhance and experiment, in order to squeeze more out
of these emails.&lt;/p&gt;

&lt;h1 id=&quot;high-level-technical-components&quot;&gt;High Level Technical Components&lt;/h1&gt;

&lt;p&gt;A good first step in system design is to chalk out the various building
blocks. Here are the high level technical components that constitute the
Brand Alerts system-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Front End- for Marketing team to create, visualize brand alert email&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Database- to store a brand alert record (with brands, sales and their relevant info)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data access layer for the database&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brand Alerts API- that other components can call to manage or get information on brand alerts&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate audience (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Render HTML (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send emails (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Job scheduler for components 5-7&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;brand-alerts-v1&quot;&gt;Brand Alerts V1&lt;/h1&gt;

&lt;p&gt;Before I introduce the V2 architecture, let me establish a baseline by
talking about Brand Alerts V1. Here is the architecture diagram (with
the distribution of aforementioned eight components)-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/brand-alerts-v2-breaking-down-a-monolith-with-aws/brand-alerts-v1-arch.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The service (&lt;code class=&quot;highlighter-rouge&quot;&gt;svc-email-brand-alert&lt;/code&gt;) is a Scala app based on standard
core-server-client model. As is evident from the diagram, this
component is doing a lot of heavy lifting. In addition to holding all the
business logic on how to generate audience and render HTML, it is also a
data access layer, an API (client module) and job scheduler (through a
separate &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; thread using Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionService&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Although most of the codebase is located inside one repo, this monolithic
architecture faces several disadvantages. It is complex, difficult to
maintain and troubleshoot by new team members, difficult to test in smaller
pieces and has multiple single points of failure that can bring down the
whole system.&lt;/p&gt;

&lt;h1 id=&quot;brand-alerts-v2&quot;&gt;Brand Alerts V2&lt;/h1&gt;

&lt;p&gt;Allow me to introduce Brand Alerts V2 with the following architecture
diagram (again, with markings for the eight technical components)-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/brand-alerts-v2-breaking-down-a-monolith-with-aws/brand-alerts-v2-arch.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first glance, one notices a lot more boxes and arrows. I can assure
you that this is a good thing. The monolithic service piece of V1 has now
been broken down into several smaller pieces, each of which is doing one
or maximum two things and is doing it rather well. These are small, yet
powerful components with baked in scalability and cohesiveness, being part
of the AWS family.&lt;/p&gt;

&lt;h1 id=&quot;new-components&quot;&gt;New Components&lt;/h1&gt;

&lt;p&gt;Next, let me elaborate on some of the newly born, super-charged components.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-job&quot;&gt;Brand Alerts Job&lt;/h2&gt;

&lt;p&gt;The core component of the brand alerts process is &lt;code class=&quot;highlighter-rouge&quot;&gt;trex-job-brand-alerts&lt;/code&gt;.
The job is written in Scala and is scheduled via AWS Batch (Sundial) to
run at a regular interval. No more maintaining our own &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; thread!&lt;/p&gt;

&lt;p&gt;When the job starts, a two step process is triggered. First, an audience
is generated for each sale/brand in the brand alert. A call is made to
Affinity API to get users who have an ‘affinity for the brand’. This set
of users is then filtered based on the user’s subscription to the brand
alert email and also to preserve his/her brand alert email receive limit
(cadence check). In the second step, a brand alert event message
is constructed corresponding to each user in the filtered
set and is sent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; SQS queue.&lt;/p&gt;

&lt;p&gt;As previously stated, the Brand Alerts job is configured to run via
&lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;. Sundial, created by Gilt
engineers, is an open source tool build on top
of AWS Batch. This tool enhances AWS Batch capabilities by providing
features such as job scheduling, multi job dependency management,
job dashboard, etc. All job settings are configurable and reside in
&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/job-config.template.json&lt;/code&gt;. These include maximum runtime, number of
retries, PagerDuty alerts (in case of job failure), to name a few.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-api&quot;&gt;Brand Alerts API&lt;/h2&gt;

&lt;p&gt;The API for Brand Alerts V2 (&lt;code class=&quot;highlighter-rouge&quot;&gt;api-brand-alert&lt;/code&gt;) is written in Python and
is an AWS Lambda, built using &lt;a href=&quot;https://github.com/aws/chalice&quot;&gt;Chalice&lt;/a&gt;
(which also provides a complimentary AWS API Gateway layering in front
of AWS Lambda).&lt;/p&gt;

&lt;p&gt;AWS Lambda provides a lightweight, “server-less” environment to host the
API’s endpoints, which are used to manage the lifecycle of a brand alert,
from creation to deletion. API Gateway, on the other hand, manages the
lifecycle of the API itself and provides valuable features such as access
control and traffic monitoring.&lt;/p&gt;

&lt;p&gt;In the root folder of the project, an &lt;code class=&quot;highlighter-rouge&quot;&gt;api.json&lt;/code&gt; file details resources
and data models of the API and is uploaded to
&lt;a href=&quot;https://app.apibuilder.io/gilt/api-brand-alert/latest&quot;&gt;API Builder&lt;/a&gt;
for versioning and client generation.&lt;/p&gt;

&lt;p&gt;This component also acts as the Data Access Layer to the DynamoDB
database. This ensures that no other component has direct access to the
database, and that any component that needs to interact with the
database must go through the API.
&lt;a href=&quot;http://boto3.readthedocs.io/en/latest/reference/services/dynamodb.html&quot;&gt;Boto3&lt;/a&gt;
library is used to obtain a Python client for DynamoDB.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-consumer&quot;&gt;Brand Alerts Consumer&lt;/h2&gt;

&lt;p&gt;The brand alert event messages sent to &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; queue
are picked up by &lt;code class=&quot;highlighter-rouge&quot;&gt;BrandAlertConsumer&lt;/code&gt; (in &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email&lt;/code&gt;). The consumer
polls for messages at a configurable interval. On finding a message in
the queue, the consumer first renders an HTML body from the information
contained in the message. Subsequently, it creates an object wrapper for
the HTML body and sends it to &lt;code class=&quot;highlighter-rouge&quot;&gt;email-gateway&lt;/code&gt; (which then sends it to
our Email Service Provider (ESP), SparkPost, for delivery).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; queue is an Amazon SQS queue and has an
associated Dead Letter Queue (DLQ) for message persistence in case of
failure. This lightweight component is fast, secure, reliable and can
scale elastically.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Since its Production launch in early February, Brand Alerts V2 has been
running smoothly, without fail, every day, in a timely, reliable manner.
The new architecture has emboldened Business, Product and Tech to
outline future iterations, packing more features than ever before.&lt;/p&gt;

&lt;p&gt;For the Tech team, this effort was a win on many levels. We were able to
envision and bring to fruition a micro services architecture, which
promises to be a step up from its previous iteration in all aspects.
In the process, through our research and experimentation, we acquired
knowledge of various AWS tools and other third party libraries.&lt;/p&gt;

&lt;p&gt;Finally, AWS, with its vast set of tools and services, is instrumental
in building powerful, resilient software. We should invest time and
resources in finding the right tools for the job; I promise you it is
well worth the effort.&lt;/p&gt;</content><author><name>Kinshuk Varshney</name></author><category term="aws" /><category term="batch" /><category term="lambda" /><category term="api gateway" /><category term="sqs" /><category term="dynamo" /><category term="sundial" /><category term="trex" /><category term="email" /><category term="architecture" /><summary>Recently, team T-Rex worked on the re-architecture of the
Brand Alerts back end system, a project which we named Brand Alerts V2.
In this blog, I share our new architecture detailing some of the new AWS
powered components.</summary></entry><entry><title>Negative Sampling (in Numpy)</title><link href="https://tech.hbc.com/2018-03-23-negative-sampling-in-numpy.html" rel="alternate" type="text/html" title="Negative Sampling (in Numpy)" /><published>2018-03-23T00:00:00-05:00</published><updated>2018-03-23T00:00:00-05:00</updated><id>https://tech.hbc.com/negative-sampling-in-numpy</id><content type="html" xml:base="https://tech.hbc.com/2018-03-23-negative-sampling-in-numpy.html">&lt;p&gt;&lt;em&gt;Alright, time to have some fun exploring efficient negative sampling implementations in NumPy…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Negative sampling is a technique used to train machine learning models that generally have several order of magnitudes more negative observations compared to positive ones. And in most cases, these negative observations are not given to us explicitly and instead, must be generated somehow. Today, I think the most prevalent usages of negative sampling is in training Word2Vec (or similar) and in training implicit recommendation systems (BPR). In this post, I’m going to frame the problem under the recommendation system setting — sorry NLP fans.&lt;/p&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;For a given user, we have the indices of positive items corresponding to that user. These are items that the user has consumed in the past. We also know the fixed size of the entire item catalog. Oh, we will also assume that the given positive indices are ordered. This is quite a reasonable assumption because positive items are often stored in CSR interaction matrices (err… at least in the world of recommender systems).&lt;/p&gt;

&lt;p&gt;And from this information, we would like to sample from the other (non-positive) items with equal probability.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;item_ind&lt;/th&gt;
      &lt;th&gt;Probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;bad-ideas&quot;&gt;Bad Ideas&lt;/h1&gt;

&lt;p&gt;We could enumerate all the possible choices of negative items and then use &lt;code class=&quot;highlighter-rouge&quot;&gt;np.random.choice&lt;/code&gt; (or similar). However, as there are usually orders of magnitude more negative items than positive items, this is not memory friendly.&lt;/p&gt;

&lt;h1 id=&quot;incremental-guess-and-check&quot;&gt;Incremental Guess and Check&lt;/h1&gt;

&lt;p&gt;As a trivial (but feasible) solution, we are going to continually sample a random item from our catalog, and keep items if they are not positive. This will continue until we have enough negative samples.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with arbitrary positivity check
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A major downside here is that we are sampling a single value many times — rather than sampling many values once. And although it will be infrequent, we have to re-sample if we get unlucky and randomly choose a positive item.&lt;/p&gt;

&lt;p&gt;This family of strategies will pretty much only differ by how item positivity is checked. We will go through a couple of ways to tinker with the complexity of the positivity check, but keep in mind that the number of positive items is generally small, so these modifications are actually not super-duper important.&lt;/p&gt;

&lt;h2 id=&quot;using-in-operator-on-the-raw-list&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator on the raw list:&lt;/h2&gt;

&lt;p&gt;With a &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, the item positivity check is O(n) as it checks every element of the list.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_naive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with list membership
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-in-operator-on-a-set-created-from-the-list&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator on a set created from the list:&lt;/h2&gt;

&lt;p&gt;Here, we’re going to first convert our &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; into a python &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; which is implemented as a hashtable. Insertion is O(1), so the conversion itself is O(n). However, once the set is created, our item positivity check (set membership) will be O(1) thereon after. So we can expect this to be a nicer strategy if &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp&lt;/code&gt; is large.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with hashtable membership
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-a-binary-search-on-the-list-assuming-its-sorted&quot;&gt;Using a binary search on the list (assuming it’s sorted):&lt;/h2&gt;

&lt;p&gt;One of best things you can do exploit the sortedness of a list is to use binary search. All this does is change our item positivity check to O(log(n)).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bisect&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bisect_left&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bsearch_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bisect_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with binary search
    `pos_inds` is assumed to be ordered
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsearch_in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Aside: LightFM, a popular recommendation system implements this in Cython. They also have a good reason to implement this in a sequential fashion — but we won’t go into that.)&lt;/p&gt;

&lt;h2 id=&quot;vectorized-binary-search&quot;&gt;Vectorized Binary Search&lt;/h2&gt;

&lt;p&gt;Here we are going to address the issue of incremental generation. All random samples will now be generated and verified in vectorized manners. The upside here is that we will reap the benefits of NumPy’s underlying optimized vector processing. Any positives found during this check will then be masked off. A new problem arises in that if we hit any positives, we will end up returning less samples than prescribed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp&lt;/code&gt; parameter. Yeah, we could fill in the holes with the previously discussed strategies, but let’s just leave it at that.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_vectorized_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check vectorized
    Assumes that we are allowed to potentially 
    return less than n_samp samples
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'clip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vectorized-pre-verified-binary-search&quot;&gt;Vectorized Pre-verified Binary Search&lt;/h2&gt;

&lt;p&gt;Finally, we are going to address both main pitfalls of the guess-and-check strategies.&lt;/p&gt;

&lt;p&gt;Vectorize: generate all our random samples at once
Pre-verify: no need for an item positivity check
We know how many negative items are available to be sampled since we have the size of our item catalog, and the number of positive items ( &lt;code class=&quot;highlighter-rouge&quot;&gt;len(pos_inds)&lt;/code&gt; is just O(1) ) to subtract off. So let’s sample uniformly over a range of imaginary negative indices with 1–1 correspondence with our negative items. This gives us the correct distribution since we have the correct number of negative item slots to sample from; however, the indices now need to be adjusted.&lt;/p&gt;

&lt;p&gt;To fix our imaginary index, we must add the number of positive items that precede each position. Assuming our positive indices are sorted, this is just a binary search (compliments of np.searchsorted). But keep in mind that in our search, for each positive index, we also need to subtract the number of positive items that precede each position.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_vectorized_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Pre-verified with binary search
    `pos_inds` is assumed to be ordered
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Briefly, let’s look at how this works for all possible raw sampled values.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# raw_samp = np.random.randint(0, n_items - len(pos_inds), size=n_samp)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Instead of sampling, see what happens to each possible sampled value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Subtract the number of positive items preceding&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Find where each raw sample fits in our adjusted positive indices&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Adjust our raw samples&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As desired, each of our sampled values has a 1–1 mapping to a negative item.&lt;/p&gt;

&lt;h2 id=&quot;summary-notebook-with-results&quot;&gt;Summary Notebook with Results&lt;/h2&gt;

&lt;p&gt;The notebook linked below compares the implementations discussed in this post in some example scenarios. The previously discussed “Vectorized Pre-verified Binary Search” strategy seems to be the most performant except in the edge case where &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp=1&lt;/code&gt; where vectorization no longer pays off (in that case, all strategies are very close).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/JasonTam/89ff752d7e35ec17d730c87aea96c19b#file-neg_samp_experiments-ipynb&quot;&gt;Notebook with results&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;concluding-remarks&quot;&gt;Concluding Remarks&lt;/h2&gt;

&lt;p&gt;In models that require negative sample, the sample stage is often a bottleneck in the training process. So even little optimizations like this are pretty helpful.&lt;/p&gt;

&lt;p&gt;Some further thinking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how to efficiently sample for many users at a time (variable length number of positive items)&lt;/li&gt;
  &lt;li&gt;at what point (sparsity of our interaction matrix) does our assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;n_neg_items &amp;gt;&amp;gt; n_pos_items&lt;/code&gt; wreck each implementation&lt;/li&gt;
  &lt;li&gt;how easy is it to modify each implementation to accommodate for custom probability distributions — if we wanted to take item frequency or expose into account&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jason Tam</name></author><category term="numpy" /><category term="sampling" /><category term="python" /><category term="algorithms" /><summary>Alright, time to have some fun exploring efficient negative sampling implementations in NumPy…</summary></entry><entry><title>The Tech Blog is Dead. Long Live the Tech Blog</title><link href="https://tech.hbc.com/2018-03-21-the-tech-blog-is-dead-long-live-the-tech-blog.html" rel="alternate" type="text/html" title="The Tech Blog is Dead. Long Live the Tech Blog" /><published>2018-03-21T00:00:00-05:00</published><updated>2018-03-21T00:00:00-05:00</updated><id>https://tech.hbc.com/the-tech-blog-is-dead-long-live-the-tech-blog</id><content type="html" xml:base="https://tech.hbc.com/2018-03-21-the-tech-blog-is-dead-long-live-the-tech-blog.html">&lt;h1 id=&quot;the-hbc-tech-blog-you-will-never-find-a-more-wretched-hive-of-tech-and-miscellany&quot;&gt;The HBC Tech Blog: “You will never find a more wretched hive of tech and miscellany.”&lt;/h1&gt;

&lt;p&gt;There’s an urban legend that maintains that your body replaces its cells
every seven years. It turns out that’s not quite true; yet, the sentiment is
inspiring, and matches some advice my college professor once offered: every
seven years or so, &lt;em&gt;reinvent yourself&lt;/em&gt;. We’re excited today to announce that,
after seven years of tech.gilt.com, we’re reinventing the Gilt Tech Blog:
welcome, friends, to the &lt;em&gt;HBC Tech Blog&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can continue to expect the same mix of insight, fun and tech miscellany
since our first post on &lt;a href=&quot;http://tech.hbc.com/2011-02-08-tips-for-optimizing-iphone-ipad-applications.html&quot; target=&quot;_blank&quot;&gt;tips of optimising iPhone applications&lt;/a&gt; back in 2011.
Since then, we’ve enjoyed insights like &lt;a href=&quot;http://tech.hbc.com/2011-03-02-the-rule-of-4.html&quot; target=&quot;_blank&quot;&gt;the rule of four&lt;/a&gt;; &lt;a href=&quot;http://tech.hbc.com/2013-03-26-26-3-13-todays-noon-outage-and-what-were-doing.html&quot; target=&quot;_blank&quot;&gt;contrite
apologies on unintended outages&lt;/a&gt;; &lt;a href=&quot;http://tech.hbc.com/2017-01-25-perfect-overnight-cold-brew.html&quot; target=&quot;_blank&quot;&gt;notes on how to make the perfect overnight
cold-brew&lt;/a&gt;; &lt;a href=&quot;http://tech.hbc.com/2014-10-17-haiku-by-the-gilt-tech-team-in-japan.html&quot; target=&quot;_blank&quot;&gt;the art of delivering the weekly tech update via Haiku&lt;/a&gt;; and, the
infamous &lt;a href=&quot;http://tech.hbc.com/2014-10-29-stilettos-by-state-a-gilt-infographic-while.html&quot; target=&quot;_blank&quot;&gt;infographic of US stiletto heel-size preference by-state&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you like the new look and new layout; big thanks to our in-house design
team! Now, if we still have your attention, read on to learn why we bother
writing a tech blog at all, and how we go about about it.&lt;/p&gt;

&lt;h1 id=&quot;what-makes-a-good-tech-blog-freedom-gateway-drugs-and-raw-desire&quot;&gt;What makes a good tech blog? Freedom, gateway drugs, and raw desire.&lt;/h1&gt;

&lt;p&gt;While our organisation’s cell structure has changed over time, our core DNA
remains the same: we’ve always taken joy in contributing to the wider tech
community, be it through speaking, writing or coding in an open and transparent
way. That said, it’s good to take this opportunity to perform a retrospective
and ask some key questions: why bother writing a tech blog? How do we know it’s
working? And, if you’re a tech team considering creating your own blog, how
should you go about doing it?&lt;/p&gt;

&lt;p&gt;The Gilt Tech Blog started as an experiment in freedom of expression: we granted
everyone in Gilt Tech access to publish to the blog (then hosted in Tumblr),
without any need for permission or review. The bet was simple: we’d make it easy
for the team to publish their thoughts, and trust them to write content that was
worthwhile and interesting. The public nature of the blog would ensure that
contributions were accurate, fair, and high-quality. Our engineers had already
noted that when writing code for open-source projects, the quality of the code
was always &lt;em&gt;higher&lt;/em&gt; than internal code; we figured the same dynamic would apply
to our writing. That bet paid off: we’ve had many contributions from across our
engineering, product, data, UX and product teams of very high quality.&lt;/p&gt;

&lt;p&gt;When we moved the blog to Github Pages, our publication process matured
to a ‘pull request’ model. Authors write articles using Markdown, and can
commit ‘gh-pages’ branch to publish immediately, or, seek critical
review first through Github’s review mechanism. Generally, our approach to
reviewing either code or content is to give transparent and constructive
feedback, that the author can choose to ignore or take on board. More often than
not, the author takes any critique on board, and the quality of the final
article is better than what one mind alone could produce.&lt;/p&gt;

&lt;p&gt;The combination of distributed editorial freedom and Github Pages makes the
mechanics of publishing easy. The next challenge is: how do you generate the
content? Looking back there were a couple of things we did to build blogging
into the tech culture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Encourage&lt;/em&gt;: most likely, if you’re still reading, you’ve already got an
interest in setting up your own blog. That means you have a few ideas
for your first articles, and an initial seed-group of authors. Get stuck
in and get your first articles out there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Celebrate&lt;/em&gt;; as articles get shared, posted and liked, share that feedback with
your wider tech team. Nothing breeds success like success.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nudge&lt;/em&gt;: We found that, while a core crew were prolific in their contributions,
we had a wider group of people in the organisation who had stories to tell but
couldn’t get over the hurdle of writing that first article. At the time, we had
a dedicated Tech Evangelist, and one of the great things she did was &lt;em&gt;nudge&lt;/em&gt;
people. She’d watch out for features releases, new technologies we were dabbling
in, cultural stories, and off-the-wall observations. Our ‘5@4’ meetings and
all-hands presentations turned out to be one of the ‘gateway drugs’ to blogging:
anyone who presented at these meetings had already done the legwork to create a
narrative around something interesting they were working on. We found that all
we needed was a little nudge, and a couple of hours work, to turn that gem into
a blog post.&lt;/p&gt;

&lt;p&gt;In the early days, we used to track the blog using KPIs like number of views,
number of likes, number of articles per month, etc. We don’t tend to do that
anymore; still, we do get excited when we see a post getting lots of likes!
At this stage, the blog runs itself. That’s a great result. Think about it:
in January of 2018 we had four articles posted &lt;em&gt;without asking, nudging,
pestering, or cajoling anyone&lt;/em&gt;. It’s pretty much down now to the team’s raw
desire to share what they’re learning. The blog has become the ultimate,
authentic, organisational expression of “this is who we are, this is what we
do.”&lt;/p&gt;

&lt;p&gt;To our authors, thank you. To our readers, thanks for hanging with us, and, we
hope you continue to enjoy the ride. And, to anyone out there setting up your
own tech blog, we hope the advice above is helpful in getting started.&lt;/p&gt;</content><author><name>Adrian Trenaman</name></author><category term="blogging" /><category term="culture" /><category term="brand" /><summary>The HBC Tech Blog: “You will never find a more wretched hive of tech and miscellany.”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tech.hbc.com{&quot;feature&quot;=&gt;&quot;the-tech-blog-is-dead-long-live-the-tech-blog/Kuopio_logs.jpg&quot;}" /></entry><entry><title>Airing Out A New Job System</title><link href="https://tech.hbc.com/2018-03-05-airing-out-a-new-job-system.html" rel="alternate" type="text/html" title="Airing Out A New Job System" /><published>2018-03-05T00:00:00-05:00</published><updated>2018-03-05T00:00:00-05:00</updated><id>https://tech.hbc.com/airing-out-a-new-job-system</id><content type="html" xml:base="https://tech.hbc.com/2018-03-05-airing-out-a-new-job-system.html">&lt;p&gt;In this article I’ll be sharing some of the knowledge the Data team at Gilt picked up in replacing our old job system with Apache Airflow. 
We undertook the decision to overhaul our job orchestration system a few months ago due to a number of reasons but have now successfully migrated all our data ingestion jobs to the new system.&lt;/p&gt;

&lt;p&gt;Firstly a little bit about our team. The Data Team at Gilt is responsible for constructing, delivering, and supporting all systems and services which enable self-service analytics
and data science across all banners and all functions at Hudson’s Bay Corp (HBC).
The scope of responsibilities begins with data ingestion, and ends with supporting our user community of BI tool uses and data scientists. 
These varieties of sources and types of processing lead us to review our job orchestration and I’ll be sharing the challenges involved, attempted solutions and lessons learned.&lt;/p&gt;

&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the beginning…&lt;/h2&gt;

&lt;p&gt;The Data team has various jobs that handle the ingestion of data from multiple sources in a variety of formats. 
Each of these sources have either strict integration guidelines regarding time of ingestion or require coordination between various jobs to ensure correct ingestion. 
This leads to numerous issues surrounding job scheduling, coordination and success criteria. We solved these issues with using our internally built job system &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As times changed, we wanted to take a fresh approach to how jobs were provisioned from a AWS point of view. 
The jobs we use are lightweight and having them running on ECS instances around the clock when they were idle was deemed as a waste of resources. 
It made sense to us to move the jobs to AWS batch instances to limit the cost of running jobs while still maintaining all the benefits of ECS. 
This lead to some problems with our Sundial job system due to the fact that at the time it didn’t support AWS Batch. 
This has changed since then with some great work by our personalisation team which you can read more about &lt;a href=&quot;http://tech.hbc.com/2017-08-04-sundial-batch.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;time-for-something-new&quot;&gt;Time for something new…&lt;/h2&gt;

&lt;p&gt;The team decided it was time to take a fresh approach to how we ran our jobs, which kicked off the investigation of a new system. 
The investigation took place over a few weeks and spanned across a number of open source solutions. 
We outlined that a new job system should at minimum support a number of features&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should be able to integrate with AWS Batch&lt;/li&gt;
  &lt;li&gt;Have a rich feature list inline with what was available in Sundial&lt;/li&gt;
  &lt;li&gt;Have the ability to contribute new features and expand existing functionality&lt;/li&gt;
  &lt;li&gt;Have the ability to have rich visualization of jobs and their dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were able to whittle down the numerous possibilities to three possible solutions. 
The first being Spotify’s Luigi system, available &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;here&lt;/a&gt; which is a really great solution and was ticking most of our boxes. 
We decided it was worthwhile to generate a proof of concept approach to really trial the solution. Luigi has been around for a long time and has rich user base which was a positive factor for us when considering it as our solution. 
It was a really close call between Luigi and the solution that we picked mainly because Luigi provides a lot of the features we are looking for.&lt;/p&gt;

&lt;p&gt;The second solution we investigated was LinkedIn’s Azkaban workflow manager, available &lt;a href=&quot;https://github.com/azkaban/azkaban&quot;&gt;here&lt;/a&gt;.
Being based in java was probably closer to our comfort zone which was a plus for this project.&lt;/p&gt;

&lt;p&gt;What we found out was that although it satisfied our needs with regards rich visualization of the jobs and their dependencies there was some drawbacks to the solution. 
It seems to be solely focused on orchestrating hadoop based jobs while we require a solution that allows us to interact with a number of possible executors, namely AWS Batch and EMR. 
It’s feature list is expansive and could prove a perfect solution for those interested in running only hadoop based jobs.&lt;/p&gt;

&lt;p&gt;The final solution was AirBnB’s Airflow solution which at the time was just picked up by the &lt;a href=&quot;https://github.com/apache/incubator-airflow&quot;&gt;Apache Foundation&lt;/a&gt;. 
Airflow was known to some of the people here in HBC but when they investigated it, it was still in its infancy and was missing a lot of features. 
We decided to see what progress was made since the last time it was looked at and we were pleased with the improvements. 
It was ticking all the boxes and after one of the engineers here did a proof of concept we decided it was the way forward for us.&lt;/p&gt;

&lt;p&gt;For a quick reference between Luigi vs Airflow, this is a great &lt;a href=&quot;http://bytepawn.com/luigi-airflow-pinball.html&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-first-attempt&quot;&gt;The first attempt…&lt;/h2&gt;

&lt;p&gt;Implementing the Airflow solution was a slight bit tricky for us at the beginning. 
A lot of the team’s expertise was based in Scala, so implementing a python based solution created a great opportunity to learn about the language.&lt;/p&gt;

&lt;p&gt;Early into the project one of our interests was to figure out how to deploy Airflow to our AWS account and how do we then deploy the DAGs to the instance. 
We addressed the first by standing up an ECS cluster with Airflow installed on it. 
For the second we setup  the ECS instances with a cron job that would pull down any changes that was pushed to the S3 bucket.&lt;/p&gt;

&lt;p&gt;We were able to successfully migrate all our existing jobs into DAGs and with some of the additions we made to the code allowed us to integrate nicely with our AWS tools such as Batch, 
SNS and Lambda&lt;/p&gt;

&lt;p&gt;In this attempt, we decided to fork the master branch of Airflow and use that as a source for us to deploy to ECS. 
This gave us some benefits such as customizing some of Airflows base code to provide us with some extra functionality. 
After some soul searching however, we decided that this perhaps was not the best approach. Maintaining the branch and our additional code could create a maintenance issue for us in the future, 
for example an incompatible change with our additional code. We decided that there must be a better way.&lt;/p&gt;

&lt;h2 id=&quot;the-refinement&quot;&gt;The refinement…&lt;/h2&gt;

&lt;p&gt;In the first attempt we figured out lot of the early problems with Airflow but we decided that maintaining the forked version was going to cause trouble down the road.
To try fix this, we decided to get a vanilla based Airflow instance up and running. This was partly to help with maintaining the system going forward since we didn’t want to have to constantly merge changes from the master branch into our fork.
This decision coupled with our earlier decision to change some of Airflows base code caused some problems for us.&lt;/p&gt;

&lt;p&gt;We decided to go with the latest release of Airflow (1.9) and create a fully dockerised version of Airflow with our DAG’s.
Luckily there are people already working in this space and we were able to source a lot of the work required from this &lt;a href=&quot;https://github.com/puckel/docker-airflow&quot;&gt;repository&lt;/a&gt;.&lt;br /&gt;
To migrate the base code that we changed, we found out that Airflow had already solved this problems via it’s &lt;a href=&quot;https://airflow.incubator.apache.org/plugins.html&quot;&gt;Plugin system&lt;/a&gt;.&lt;br /&gt;
The plugin system gives us a nice way of expanding our functionality and hopefully releasing our plugins as an open sourced in the future.&lt;/p&gt;

&lt;p&gt;This process had its challenges but there is a great community of Airflow users and we were able to get a lot of help. Some of the sources we used were Stack Overflow and the ever busy Apache Airflow gitter.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Now that we have our Airflow setup and jobs migrated we are experiencing the full benefits of what airflow has to offer. 
Within a day we were able to create plugins that allow us to integrate with AWS EMR. This allowed the creation of DAG’s that will in the future support the migration of our ELT process to ETL using Spark, a big 2018 and 2019 initiative here at Gilt/HBC. 
We are eagerly awaiting the improved DAG deployment system thats coming to Airflow to improve our deployment process but we feel we are in a good place with it at the moment.&lt;/p&gt;

&lt;p&gt;The Data teams roadmap has multiple exciting challenges to solve from ingestion, transformation to loading. 
Having our Airflow setup, we feel we are in a good position now to tackle these problems.&lt;/p&gt;

&lt;p&gt;A big callout to &lt;a href=&quot;https://github.com/dmateusp&quot;&gt;Daniel Mateus Pires&lt;/a&gt; who acted as our go to person in all things Airflow.&lt;/p&gt;

&lt;p&gt;Over the new month or so we are really going to ramp up and if you’re interested in helping us solve these problems, take a look at our careers page &lt;a href=&quot;https://www.linkedin.com/jobs/search/?f_C=167354%2C1453743&amp;amp;locationId=OTHERS.worldwide&quot;&gt;here&lt;/a&gt; and get in touch.&lt;/p&gt;</content><author><name>[&quot;Terry McCartan&quot;]</name></author><category term="airflow" /><category term="aws" /><category term="docker" /><category term="tech" /><category term="data" /><category term="etl" /><category term="scheduling" /><summary>In this article I’ll be sharing some of the knowledge the Data team at Gilt picked up in replacing our old job system with Apache Airflow. 
We undertook the decision to overhaul our job orchestration system a few months ago due to a number of reasons but have now successfully migrated all our data ingestion jobs to the new system.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tech.hbc.com{&quot;feature&quot;=&gt;&quot;airing-out-a-new-job-system/feature-image-airflow.jpg&quot;}" /></entry><entry><title>AWS SDK for Java, version 2.0</title><link href="https://tech.hbc.com/2018-01-26-aws-sdk-for-java.html" rel="alternate" type="text/html" title="AWS SDK for Java, version 2.0" /><published>2018-01-26T00:00:00-05:00</published><updated>2018-01-26T00:00:00-05:00</updated><id>https://tech.hbc.com/aws-sdk-for-java</id><content type="html" xml:base="https://tech.hbc.com/2018-01-26-aws-sdk-for-java.html">&lt;p&gt;The Capital Region AWS User Group met on January 18th at the &lt;a href=&quot;https://sunypoly.edu/research/albany-nanotech-complex.html&quot;&gt;Nanotech Complex&lt;/a&gt; in Albany New York. &lt;a href=&quot;https://www.commercehub.com/&quot;&gt;CommerceHub&lt;/a&gt; hosted the meeting at their main office.&lt;/p&gt;

&lt;p&gt;The topic of this month’s meetup was the AWS SDK for Java. At HBC, our development teams use the SDK to access AWS services such as DynamoDB, S3, CloudWatch, and SNS. The v1 SDK has been a core building block at HBC since 2014.&lt;/p&gt;

&lt;p&gt;In June 2017, Amazon released a new implementation of the SDK for Java.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-june-2017.png&quot; alt=&quot;aws-sdk-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The version 2.0 SDK is available as a developer preview. HBC is evaluating the new SDK and we look forward to using it in production later this year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-github-v2-sdk.png&quot; alt=&quot;aws-sdk-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our engineering team has already started incorporating the v2 SDK into our helper libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gfc-aws-cloudwatch – &lt;a href=&quot;https://github.com/gilt/gfc-aws-cloudwatch/pull/8/&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;gfc-s3-cache – &lt;a href=&quot;https://github.com/gilt/gfc-s3-cache/pull/4&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The v2 API uses  &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;java.util.concurrent.CompletableFuture&lt;/a&gt; to encapsulate the result of an AWS service call. HBC’s Scala libraries will use &lt;a href=&quot;https://github.com/scala/scala-java8-compat/blob/master/src/main/scala/scala/compat/java8/FutureConverters.scala&quot;&gt;FutureConverters&lt;/a&gt; to convert Java CompletableFuture objects into Scala Future objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-futureconverters.png&quot; alt=&quot;aws-sdk-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about the v2 SDK, review my slidedeck or watch Kyle Thomson’s re:invent 2017 presentation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/aws-sdk-for-java-version-2-dot-0-albany-ny-january-18-2018&quot;&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/AWS_SDK_for_Java-speakerdeck-albany-480.png&quot; alt=&quot;aws-sdk-java-speakerdeck-albany-image&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=byRois3s5Yc&quot;&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-kyle-reinvent-youtube-480.png&quot; alt=&quot;aws-reinvent-2017-kyle-thomson-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="aws" /><category term="java" /><category term="scala" /><category term="cloud" /><category term="albany" /><category term="newyork" /><category term="2018" /><summary>The Capital Region AWS User Group met on January 18th at the Nanotech Complex in Albany New York. CommerceHub hosted the meeting at their main office.</summary></entry><entry><title>Career Structure. It doesn’t matter. Until it matters.</title><link href="https://tech.hbc.com/2018-01-24-career-structure.html" rel="alternate" type="text/html" title="Career Structure. It doesn't matter. Until it matters." /><published>2018-01-24T00:00:00-05:00</published><updated>2018-01-24T00:00:00-05:00</updated><id>https://tech.hbc.com/career-structure</id><content type="html" xml:base="https://tech.hbc.com/2018-01-24-career-structure.html">&lt;p&gt;In this article, I’m going to talk about career structure, career development, and career titles in a tech organisation. This post is more about organisational development than it is about technology; however, on the grounds that the health of your architecture and technology choices will be somewhat isomorphic to the health of your organisation, I believe this to be a worthwhile read for any engineering leader. I’m also writing this for anyone who is considering joining HBC Tech, so that they can understand our approach, and the meaning we give to our titles.&lt;/p&gt;

&lt;p&gt;I’ll cover our motivation and need for a career structure, the core principles that drove our solution, and, perhaps most importantly, our experience in transitioning to that solution in a Dunbar-sized technology organisation at HBC Tech.&lt;/p&gt;

&lt;h3 id=&quot;i-dont-care-about-my-title&quot;&gt;“I don’t care about my title.”&lt;/h3&gt;
&lt;p&gt;Titles are an amazing thing. When I joined Gilt in 2011, I didn’t care about titles; I was happy to shed my shiny ‘Distinguished Engineer’ title from IONA Technologies and join Gilt as a Senior Engineer. It was easy: the general rule was that every engineer at Gilt apart from our CTO was a Senior Engineer, and the democratic, meritocratic, startup culture obviated the need for titles.&lt;/p&gt;

&lt;p&gt;However, over time something interesting happened, not quite to me directly, but to the organisation as a whole. Blips started to appear in the organisational title space - a new hire would arrive as a ‘Principal’, and peers would wonder “what does that mean?”. Or, someone would become a team lead, or Director of Engineering, which begged the question: is that higher than an Engineer, or, somehow equivalent? And then blips started attracting attention from &lt;em&gt;outside&lt;/em&gt; of our organisational radar: our team would see their peers in the industry getting promotions and fancy titles, and wonder were they somehow stagnating in their careers?&lt;/p&gt;

&lt;p&gt;Organisations develop and grow over time; the tech leadership team at Gilt realised in February of 2013 that the organisation needed and wanted a clear career structure, something different from our original loose, startup-y approach. The career structure we landed on at Gilt worked well for us in the subsequent three years. More recently in 2017 we set out to create a career structure for the larger HBC Tech organisation; we wanted to design it carefully so that it would align with our cultural values and learn form our experience. We started with a few principles to guide our thoughts.&lt;/p&gt;

&lt;h3 id=&quot;the-principles&quot;&gt;The principles&lt;/h3&gt;

&lt;p&gt;Here’s what we felt was important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Meritocracy (or, you &lt;em&gt;earn&lt;/em&gt; your title)&lt;/strong&gt;: No-one is ‘entitled’ to a title: just because you’ve been here a while, doesn’t mean you qualify for a promotion. Ever. We expect you to perform at the next level for sustained period - at least six months - before you can get promoted. A good metric of your success in this regard is that your promotion should be a surprise to &lt;em&gt;nobody&lt;/em&gt;; the only surprise should be a colleague saying “Hey, I thought you were at that level already!”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Equivalence of Individual Contributors and People Leads&lt;/strong&gt;: We feel strongly about this. We hire talented people who design and build great things, and we wanted to create a career development path that encourages development in the skill that make you great. &lt;em&gt;No one should ever feel that they have to become “a manager” to get promoted&lt;/em&gt;. Equivalence should apply to compensation, but also in day-to-day operations: for example, in our Dublin office we extended our regular “Dublin Leads Meeting” to a “Dublin Leads &amp;amp; Principals Meeting”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;We want Leaders, not Managers&lt;/strong&gt;: When you have talented individuals, working in small autonomous well-knit teams, you don’t need to manage. We develop our leaders from within: for us, leaders are people who love their craft, but also get a real kick out of leading people: showing the way, setting direction, getting alignment, and making the team successful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Encourage people to try leadership out, with a route back to Individual Contributor&lt;/strong&gt;: The idea of putting &lt;em&gt;yourself&lt;/em&gt; forward as a team lead is daunting for many individual contributors; some of that may be down to humility (“Why do I think I’m better equipped to lead than everyone else on my team?”), or fear of failure (“What happens if I’m just not good at this?”). Perhaps the biggest fear is the idea of losing your grasp on the skills and talents that make you great as an engineer in the first place. We wanted to create an environment where individual contributors could experiment with leadership roles, and have an avenue back to individual contributor later should they so desire. I must confess: the first time I saw a team lead return to an individual contributor engineering role and be replaced by another more junior team member as lead, I honestly thought it would never work. I was wrong. The original lead (now engineer) and new lead just got stuck in at what they were good at, and the team was great.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these principles in place, the question became “What kind of career structure can support this?”&lt;/p&gt;

&lt;h3 id=&quot;what-do-other-organisations-do-about-career-titles&quot;&gt;What do other organisations do about career titles?&lt;/h3&gt;

&lt;p&gt;We triangulated ourselves off our understanding of organisations like Netflix, Facebook and Google, and how they manage their career structures. Organisations don’t often publish their career structure; however, pulling together from a number of sources and contacts, we saw some interesting patterns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Netflix&lt;/strong&gt;: Netflix operates a very simple structure. Ultimately, every engineer is a Senior Engineer, and there is a separate track for leadership, including Manager, Director, VP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Google&lt;/strong&gt;: Google has a multi-tier ‘levelled’ system, with individual contributor levels ranging from &lt;em&gt;Level 1: Software Engineer I&lt;/em&gt; to &lt;em&gt;Level 10: Senior Google Fellow&lt;/em&gt;, and a parallel engineering management track that ranges from level 5 to level 10.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Facebook also has a multi-tier ‘levelled’ system. Engineers range from &lt;em&gt;Level 3 - Software Engineer&lt;/em&gt; up to a &lt;em&gt;Level 9&lt;/em&gt;, with associated &lt;em&gt;Manager&lt;/em&gt; and &lt;em&gt;Director&lt;/em&gt; roles on a parallel track above &lt;em&gt;Level 5&lt;/em&gt;. Anecdotally, once an individual elects into the management track, the intent is that they will remain in that track.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gilt&lt;/strong&gt;: At Gilt, pre-2013 we had a structure similar to Netflix (see above!), and we found that this structure didn’t give a compelling career prospect for individual contributors in our engineering teams. Ironically, for tech team with a strong startup mentality, we looked to the industry and adopted what outwardly seems to be a fairly &lt;em&gt;traditional&lt;/em&gt; approach. Based on the &lt;a href=&quot;https://radford.aon.com/insights/articles/2015/radford-global-job-leveling&quot;&gt;Radford&lt;/a&gt; methodology, we created a career path and approach that had the following qualities:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Recognised different levels of ability, impact, contribution, scope and influence across individual contributor and leadership tracks; and,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Encouraged folk to jump across the Individual Contributor / Leadership boundary as their career develops.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The roll-out of the approach at Gilt was positive: it became clearer to staff who their peers were, and what ‘the next level’ really looked like. Career development discussions went from the abstract to the concrete. Perhaps the biggest result was that a generation of individual contributors, who had resisted the idea of taking on a leadership role, gave leadership a try &lt;em&gt;and discovered they were good at it&lt;/em&gt;. More-so, on our engineering teams, we developed a culture of ‘leaders-who-code’: we found that engineering leads up to the level of Director and Senior Director continued to make significant impacts in terms on engineering contributions. Result!&lt;/p&gt;

&lt;h3 id=&quot;the-hbc-tech-career-path&quot;&gt;The HBC Tech Career Path&lt;/h3&gt;

&lt;p&gt;After HBC acquired Gilt in 2016, the subsequent merger of the tech teams presented a challenge in terms of career paths: which career structure should we adopt, the existing HBC career structure, or, the Gilt career structure? Rather than just pick one of the existing, we took the opportunity to rethink both, and, landed on a structure loosely modelled on the ideas from Radford, Google and Gilt, as per the table below.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level&lt;/th&gt;
      &lt;th&gt;Individual Contributor&lt;/th&gt;
      &lt;th&gt;Leadership&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Software Engineer I&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Software Engineer II&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Software Engineer III&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Senior Engineer&lt;/td&gt;
      &lt;td&gt;Lead Engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Staff Engineer&lt;/td&gt;
      &lt;td&gt;Senior Lead Engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Principal Engineer&lt;/td&gt;
      &lt;td&gt;Director of Engineering&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Distinguished Engineer&lt;/td&gt;
      &lt;td&gt;Senior Director of Engineering&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Fellow&lt;/td&gt;
      &lt;td&gt;VP Engineering&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;SVP Engineering&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This approach has all the qualities we were looking for: equality of levels, ability to experiment with leadership at the senior level, and supported our culture of valuing leadership and autonomy rather than management and rule.&lt;/p&gt;

&lt;p&gt;For each level, we worked out key indicators of what it means to be at that level. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Level of knowledge&lt;/strong&gt;: how much domain knowledge / expertise is required and expected at a particular level?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Job complexity&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Supervision&lt;/strong&gt;: how much supervision / hand-holding should we expect the individual to need at a particular level?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Experience&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sphere of influence&lt;/strong&gt;. This is one of my favourite indicators: at early levels, the sphere of influence is really ‘self’. As we get to subsequent levels, we expect individual contributors and leads to influence their teams, department, tech, the wider organisation, and the industry &amp;amp; community.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Team size (for leads)&lt;/strong&gt;. There’s some good rules of thumb in terms of team size:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Lead Level&lt;/th&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Team size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Lead Engineer&lt;/td&gt;
      &lt;td&gt;7 ± 2 (a pizza size team)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Senior Lead&lt;/td&gt;
      &lt;td&gt;10 ± 2 (a large team, or team of teams)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Director&lt;/td&gt;
      &lt;td&gt;20 ± 4 (a classroom-size team of teams)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Senior Director&lt;/td&gt;
      &lt;td&gt;25+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;VP Engineering&lt;/td&gt;
      &lt;td&gt;~80 (e.g. an engineering site / office)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;SVP Engineering&lt;/td&gt;
      &lt;td&gt;~150 (a Dunbar)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Accountability&lt;/strong&gt;: what are the systems that you own / are responsible for. How critical are they to the business?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One big learning is that these indicators are only &lt;em&gt;guidelines&lt;/em&gt;. I dislike the idea of career advancement being a box-ticking exercise: there is a qualitative judgement that we as leaders need to apply, and sometimes a candidate’s excellence in one area may make up for a deficiency in another, or, make up for organisational blockers. For example, we once had a Director of Engineering with a small team of four or five reports; you could argue that this Director didn’t have a large enough team to warrant the title. However, when we considered his technical ability, the scope of the role, the level of accountability, and, the fact that we would most likely never have a classroom size team in this area, we felt great about promoting.&lt;/p&gt;

&lt;p&gt;Qualitative judgement of levels is, of course, hard. One idea we found helpful was to look at &lt;em&gt;peer groups&lt;/em&gt;, to ensure that staff at the same level are in the same peer group. If we find that a member of staff ended up grouped with other members who seem at a different level, we re-examine the case to make sure our evaluation has been correct and fair.&lt;/p&gt;

&lt;h3 id=&quot;rolling-out-a-career-path&quot;&gt;Rolling out a Career Path&lt;/h3&gt;

&lt;p&gt;With our new career path in place we then had to figure out how to roll it out. Ultimately, rolling out a new career structure means you may be changing your people’s titles: we want to make sure that we did that in a sensitive and proactive way. For example: if someone’s existing title is ‘Software Engineer’, then the question is what level are they in the new system (I, II, III)? How will someone feel if they think they’re a III, but we think they’re a II?&lt;/p&gt;

&lt;p&gt;We settled on a couple of core ideas to help us make a smooth transition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are no salary or bonus adjustments as part of transitioning to the new structure. No one gets a pay cut, no one gets a pay rise: the focus is on getting the track and level right.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We apply the level &lt;em&gt;as is&lt;/em&gt;: there are &lt;em&gt;no&lt;/em&gt; promotions as part of the levelling. We didn’t want to use this exercise as a way for folk to canvas for a promotion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We involved each individual in the selection of their level, through 1:1s with their current directors and leads. At the end of the exercise, everyone knows their level (1-9) and track (Individual Contributor / Lead), and has been part of the process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Individuals can adopt their new title publicly if they wish, or retain their current title. Whatever about our internal career titles, we didn’t feel it was right to force people to change their LinkedIn profiles!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Everyone gets evaluated at their level and track going forward. This is a nice feedback loop back to having individuals involved in the selection of their role! Sure, maybe you did persuade your lead that you’re a Software Engineer III: if so, then you’ll be evaluated against your peers… you better be up to it :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So then, we began the roll out! With a Dunbar-sized subset of the organisation we formulated a simple plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Communicate: let everyone know what’s going on! You really can’t communicate enough on these things: despite your best intentions, there will always be someone who “didn’t get the memo” or wasn’t there when you talked about it at an All Hands meeting. Communicate often across multiple channels, and be mindful of people who may not have missed out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Educate: after the initial communications, we moved to educate our folk in groups of about 20, with a one-hour walkthrough of the career path, where it came from, why it’s important, and backed up with all the materials. This is a nice ‘classroom’ size: big enough to scale the communications, but small enough that folk feel comfortable  talking about the issues, and asking questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get personal: after the education sessions, we ran our 1:1s with folk to settle levels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Close the loop with HR! In almost every organisation I’ve ever worked for, the system HR uses to store titles and levels has been different from the spreadsheet I’ve been working off. It’s crazy after all this levelling work to think that six months later someone might get an official letter with the &lt;em&gt;wrong title&lt;/em&gt;! As a general rule in life, it’s always good to &lt;em&gt;hammer the nail all the way in&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;its-nice-to-have-a-title-so-then-you-dont-have-to-care-about-it-any-more&quot;&gt;“It’s nice to have a title, so then you don’t have to care about it any more.”&lt;/h3&gt;

&lt;p&gt;The irony of &lt;em&gt;all&lt;/em&gt; of this is that, really, still, I don’t care much about titles! When I was a tech consultant in a previous job we always had this saying: “You’re only ever as good as your last gig.” Likewise, when it comes to titles, there’s no resting on your laurels, proudly shining and polishing your trophy title: you must deliver, every day, for your team and for the organisation. That said, there are a couple of real benefits that we’ve seen from this work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Having clarity on titles means that any fear, uncertainty, envy, distrust related to previous title confusion is now gone. Everyone knows where they are, and can just get down to work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Career development conversations just got a whole lot more interesting. Now we can have meaningful conversations with our staff on where they are, where they want to go, and, how they can get there.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final piece of advice: title systems and career paths are frameworks that exist to help us; they’re a tool that should enable us, not restrict us or box us in. While we have leaders-who-code (e.g. directors of engineering optimising our caching architecture), we also have coders-who-lead on some of our teams (e.g. principal engineers leading teams working on a technical area like ElasticSearch); and, this is as it should be. We flex the framework to our needs. And, if we find that this framework breaks, we’ll fix it, and perhaps write another post to let you know what we learnt.&lt;/p&gt;</content><author><name>Adrian Trenaman</name></author><category term="culture" /><category term="career path" /><category term="titles" /><summary>In this article, I’m going to talk about career structure, career development, and career titles in a tech organisation. This post is more about organisational development than it is about technology; however, on the grounds that the health of your architecture and technology choices will be somewhat isomorphic to the health of your organisation, I believe this to be a worthwhile read for any engineering leader. I’m also writing this for anyone who is considering joining HBC Tech, so that they can understand our approach, and the meaning we give to our titles.</summary></entry></feed>
