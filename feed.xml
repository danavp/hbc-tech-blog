<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.7.3">Jekyll</generator><link href="http://tech.hbc.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://tech.hbc.com/" rel="alternate" type="text/html" /><updated>2018-04-17T14:11:16-05:00</updated><id>http://tech.hbc.com/</id><title>HBC Tech</title><subtitle>We power the website and mobile experiences for Saks,  Saks Off Fifth, Gilt, Lord &amp; Taylor and The Bay.
</subtitle><entry><title>A Non-Technical Guide to Posting to the Tech Blog</title><link href="http://tech.hbc.com/2018-04-12-non-technical-guide-to-posting-to-the-blog.html" rel="alternate" type="text/html" title="A Non-Technical Guide to Posting to the Tech Blog" /><published>2018-04-12T00:00:00-05:00</published><updated>2018-04-12T00:00:00-05:00</updated><id>http://tech.hbc.com/non-technical-guide-to-posting-to-the-blog</id><content type="html" xml:base="http://tech.hbc.com/2018-04-12-non-technical-guide-to-posting-to-the-blog.html">&lt;p&gt;Our tech organization is obviously made up of more than just developers.  Non-developers have great insight from their work too! This post is a nudge to all my fellow colleagues who are also doing amazing work and would like to share, but feel intimitated by the pull request process.&lt;/p&gt;

&lt;p&gt;Are you a techie? We have a guide for developers &lt;a href=&quot;https://github.com/saksdirect/hbc-tech-blog/blob/master/docs/contributing.md&quot;&gt;here&lt;/a&gt;, for everyone else, read on.&lt;/p&gt;

&lt;h2 id=&quot;step-1-write-your-post&quot;&gt;Step 1: Write Your Post&lt;/h2&gt;

&lt;p&gt;Writing is probably the hardest part of this whole thing. All you need to do is open a new Google Doc and type one letter after the other. Organize your thoughts by utilizing built in text headings; ie: bulleted lists, and text styles already available in Google Docs. As an example, take a look at &lt;a href=&quot;https://docs.google.com/document/d/1Gdu5oIoqV7FuIdjkWK8rshUEeBPQ0uUm2RZ3RuPc850/edit?usp=sharing&quot;&gt;the doc used to create this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/headings.png&quot; alt=&quot;Sample Headings&quot; title=&quot;Sample Headings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-add-some-images&quot;&gt;Step 2: Add Some Images&lt;/h2&gt;

&lt;p&gt;People like pictures! Illustrate your ideas with a few images, screen captures, or even cat GIFs if appropriate. Insert your images via the toolbar in Google Docs, but keep the original assets handy, we’ll need to upload them to Github and adjust the image paths later. Don’t worry about the technical stuff yet, just keep writing.&lt;/p&gt;

&lt;h2 id=&quot;step-3-convert-your-google-doc-to-markdown&quot;&gt;Step 3: Convert Your Google Doc to Markdown&lt;/h2&gt;

&lt;p&gt;The Markdown stuff helps some web applications format text, create links, and embed images. Don’t be scared, most of the conversion can be automated for you. There is a Google Docs Add-on called, you guessed it, Google Docs To Markdown, or GD2md for short. Follow &lt;a href=&quot;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf?utm_source=permalink&quot;&gt;this link&lt;/a&gt; to add it to your Google Drive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf?utm_source=permalink&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/gd-to-md.png&quot; alt=&quot;gd-to-md&quot; title=&quot;gd-to-md&quot; class=&quot;center-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;when-youre-happy-with-what-youve-written-follow-the-steps-below&quot;&gt;When you’re happy with what you’ve written, follow the steps below:&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From the Google Docs &lt;strong&gt;Add-ons&lt;/strong&gt; menu, select &lt;strong&gt;GD2md-html &amp;gt; Convert&lt;/strong&gt;. The sidebar window opens.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Markdown button in the sidebar window to convert your document to Markdown. If you select part of the document, GD2md-html will convert only the selection. Otherwise it will convert the entire document. Click the Docs link for more information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preview your post by copying and pasting the text from the sidebar into an online editor like &lt;a href=&quot;https://stackedit.io/&quot;&gt;Stack Edit&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll see there are a few extra lines of text added during the conversion. These can safely be removed, as they’re just warnings about image paths needing to be corrected. We’ll tackle these changes later.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-4-add-some-yaml&quot;&gt;Step 4: Add Some YAML&lt;/h2&gt;

&lt;p&gt;We use YAML formatting to store information about each post ie: title, post date, category, etc. Copy the snippet below and change the values according to your post. &lt;em&gt;(make sure to copy the 3 dashes at the beginning and ending)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: A Non-Technical Guide to Posting to the Tech Blog.
description: Step by step instructions explaining how to post to the tech blog without requiring a degree in computer science.
author: Jaret Stezelberger
date: 2018-04-12
categories:
- Culture
tags: 
- Tech Blog
- How To
- Culture
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-5-upload-everything-to-github&quot;&gt;Step 5: Upload Everything To Github&lt;/h2&gt;

&lt;p&gt;If you don’t already have GitHub account, get one &lt;a href=&quot;https://github.com/&quot;&gt;here&lt;/a&gt;. It’s the modern library card! Once you’re signed into your Github Account, you’re just a few simple steps away from posting.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy (Fork) HBC Tech Blog To Your GitHub Account&lt;/li&gt;
  &lt;li&gt;Create A Copy For Your New Work (Create a New Branch)&lt;/li&gt;
  &lt;li&gt;Add Your Post File and Then Save (Commit) it&lt;/li&gt;
  &lt;li&gt;If Needed, Upload A Folder of Assets (Another Commit)&lt;/li&gt;
  &lt;li&gt;Let The Team Know You’re Ready to Publish (Create A New Pull Request in GitHub)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;heres-a-closer-look-at-those-steps-one-by-one&quot;&gt;Here’s a closer look at those steps one by one:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 5.1&lt;/strong&gt; Fork It&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/01-fork-button.png&quot; alt=&quot;Fork The Blog Repo&quot; title=&quot;Fork the Blog Repo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.2&lt;/strong&gt; Create A Branch For Your New Post&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/02-create-new-branch.png&quot; alt=&quot;Create A New Branch&quot; title=&quot;Create A New Branch&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.3&lt;/strong&gt; Navigate to the Posts Folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/03-navigate-to-posts-directory.png&quot; alt=&quot;Navigate to the Posts Directory&quot; title=&quot;Navigate to the Posts Directory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.4&lt;/strong&gt; Create Your Post File&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/04-create-new-file.png&quot; alt=&quot;Create a New File&quot; title=&quot;Create a New File&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.5&lt;/strong&gt; Save Your Changes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/05-commit-new-file.png&quot; alt=&quot;Commit Your File&quot; title=&quot;Commit Your File&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.6&lt;/strong&gt; Add Your Images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/06-navigate-to-images-directory.png&quot; alt=&quot;Navigate to the Images Directory&quot; title=&quot;Navigate to the Images Directory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.7&lt;/strong&gt; Upload your images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/07-upload-your-images.png&quot; alt=&quot;Upload Your Images&quot; title=&quot;Upload Your Images&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.8&lt;/strong&gt; Update Image Your Paths&lt;/p&gt;

&lt;p&gt;In the previous step, converting your Google Doc to Markdown, image paths were set with placeholders. You’ll need to change these to correctly match the &lt;strong&gt;folder&lt;/strong&gt; and &lt;strong&gt;file&lt;/strong&gt; names you’ve uploaded to GitHub.&lt;/p&gt;

&lt;p&gt;In our example above they would change from:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![alt_text](images/blog-post-how-to0.png &quot;image_tooltip&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Fork The Blog Repo](./assets/images/blog-post-how-to/01-fork-button.png &quot;Fork the Blog Repo&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 5.9&lt;/strong&gt; Create a New Pull Request&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/blog-post-how-to/08-create-pull-request.png&quot; alt=&quot;Create Your Pull Request&quot; title=&quot;Create Your Pull Request&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Hopefully, after reading this post, the tech blog has been demystified and the few technical things around markdown conversion and fixing image paths won’t scare you away. If you get stuck, try looking for your answer in the documentation &lt;a href=&quot;https://github.com/saksdirect/hbc-tech-blog/blob/master/docs/contributing.md&quot;&gt;here&lt;/a&gt;. If you need help with Markdown, there are a ton of resources online. &lt;a href=&quot;https://stackedit.io/&quot;&gt;Stack Edit&lt;/a&gt; is your friend.&lt;/p&gt;</content><author><name>[&quot;Jaret Stezelberger&quot;]</name></author><category term="Tech Blog" /><category term="Culture" /><summary>Our tech organization is obviously made up of more than just developers.  Non-developers have great insight from their work too! This post is a nudge to all my fellow colleagues who are also doing amazing work and would like to share, but feel intimitated by the pull request process.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://tech.hbc.com{&quot;feature&quot;=&gt;nil, &quot;credit&quot;=&gt;nil, &quot;creditlink&quot;=&gt;nil}" /></entry><entry><title>Brand Alerts V2: Breaking Down a Monolith with AWS</title><link href="http://tech.hbc.com/2018-04-02-brand-alerts-v2-breaking-down-a-monolith-with-aws.html" rel="alternate" type="text/html" title="Brand Alerts V2: Breaking Down a Monolith with AWS" /><published>2018-04-02T00:00:00-05:00</published><updated>2018-04-02T00:00:00-05:00</updated><id>http://tech.hbc.com/brand-alerts-v2-breaking-down-a-monolith-with-aws</id><content type="html" xml:base="http://tech.hbc.com/2018-04-02-brand-alerts-v2-breaking-down-a-monolith-with-aws.html">&lt;p&gt;Recently, team T-Rex worked on the re-architecture of the
Brand Alerts back end system, a project which we named Brand Alerts V2.
In this blog, I share our new architecture detailing some of the new AWS
powered components.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Brand Alerts V2 breaks down the monolithic architecture of Brand Alerts
V1, into small, independent micro services. It enhances flexibility and
extensibility of the system, not to forget, facilitates agile development,
continuous integration and delivery. It also addresses some of our recent
pain points- database and thread scheduling issues, resulting at times
in non delivery of brand alert emails. Our intent was to delegate much
of the boilerplate work to AWS tools and services, which are built to
handle these use cases in tried and tested fashion and at scale.&lt;/p&gt;

&lt;h1 id=&quot;what-are-brand-alerts&quot;&gt;What Are Brand Alerts?&lt;/h1&gt;

&lt;p&gt;Before I go any further, let me describe what Brand Alerts are.&lt;/p&gt;

&lt;p&gt;Brand Alerts are emails sent to Gilt members notifying them of an upcoming
sale on a brand of their liking. A brand alert email is the ideal way to
beat the crowd and avail deep discounts on high-end fashion
brands. A typical brand alert email is sent in the evening (usually
around 6 PM) a day prior to when the brand goes on sale.&lt;/p&gt;

&lt;p&gt;It should also be noted that Brand Alert emails have one of the highest
click-through rates (among all our triggered emails) and so business is
always looking to enhance and experiment, in order to squeeze more out
of these emails.&lt;/p&gt;

&lt;h1 id=&quot;high-level-technical-components&quot;&gt;High Level Technical Components&lt;/h1&gt;

&lt;p&gt;A good first step in system design is to chalk out the various building
blocks. Here are the high level technical components that constitute the
Brand Alerts system-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Front End- for Marketing team to create, visualize brand alert email&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Database- to store a brand alert record (with brands, sales and their relevant info)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data access layer for the database&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brand Alerts API- that other components can call to manage or get information on brand alerts&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate audience (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Render HTML (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send emails (business logic component)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Job scheduler for components 5-7&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;brand-alerts-v1&quot;&gt;Brand Alerts V1&lt;/h1&gt;

&lt;p&gt;Before I introduce the V2 architecture, let me establish a baseline by
talking about Brand Alerts V1. Here is the architecture diagram (with
the distribution of aforementioned eight components)-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/brand-alerts-v2-breaking-down-a-monolith-with-aws/brand-alerts-v1-arch.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The service (&lt;code class=&quot;highlighter-rouge&quot;&gt;svc-email-brand-alert&lt;/code&gt;) is a Scala app based on standard
core-server-client model. As is evident from the diagram, this
component is doing a lot of heavy lifting. In addition to holding all the
business logic on how to generate audience and render HTML, it is also a
data access layer, an API (client module) and job scheduler (through a
separate &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; thread using Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionService&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Although most of the codebase is located inside one repo, this monolithic
architecture faces several disadvantages. It is complex, difficult to
maintain and troubleshoot by new team members, difficult to test in smaller
pieces and has multiple single points of failure that can bring down the
whole system.&lt;/p&gt;

&lt;h1 id=&quot;brand-alerts-v2&quot;&gt;Brand Alerts V2&lt;/h1&gt;

&lt;p&gt;Allow me to introduce Brand Alerts V2 with the following architecture
diagram (again, with markings for the eight technical components)-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/brand-alerts-v2-breaking-down-a-monolith-with-aws/brand-alerts-v2-arch.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first glance, one notices a lot more boxes and arrows. I can assure
you that this is a good thing. The monolithic service piece of V1 has now
been broken down into several smaller pieces, each of which is doing one
or maximum two things and is doing it rather well. These are small, yet
powerful components with baked in scalability and cohesiveness, being part
of the AWS family.&lt;/p&gt;

&lt;h1 id=&quot;new-components&quot;&gt;New Components&lt;/h1&gt;

&lt;p&gt;Next, let me elaborate on some of the newly born, super-charged components.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-job&quot;&gt;Brand Alerts Job&lt;/h2&gt;

&lt;p&gt;The core component of the brand alerts process is &lt;code class=&quot;highlighter-rouge&quot;&gt;trex-job-brand-alerts&lt;/code&gt;.
The job is written in Scala and is scheduled via AWS Batch (Sundial) to
run at a regular interval. No more maintaining our own &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; thread!&lt;/p&gt;

&lt;p&gt;When the job starts, a two step process is triggered. First, an audience
is generated for each sale/brand in the brand alert. A call is made to
Affinity API to get users who have an ‘affinity for the brand’. This set
of users is then filtered based on the user’s subscription to the brand
alert email and also to preserve his/her brand alert email receive limit
(cadence check). In the second step, a brand alert event message
is constructed corresponding to each user in the filtered
set and is sent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; SQS queue.&lt;/p&gt;

&lt;p&gt;As previously stated, the Brand Alerts job is configured to run via
&lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;. Sundial, created by Gilt
engineers, is an open source tool build on top
of AWS Batch. This tool enhances AWS Batch capabilities by providing
features such as job scheduling, multi job dependency management,
job dashboard, etc. All job settings are configurable and reside in
&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/job-config.template.json&lt;/code&gt;. These include maximum runtime, number of
retries, PagerDuty alerts (in case of job failure), to name a few.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-api&quot;&gt;Brand Alerts API&lt;/h2&gt;

&lt;p&gt;The API for Brand Alerts V2 (&lt;code class=&quot;highlighter-rouge&quot;&gt;api-brand-alert&lt;/code&gt;) is written in Python and
is an AWS Lambda, built using &lt;a href=&quot;https://github.com/aws/chalice&quot;&gt;Chalice&lt;/a&gt;
(which also provides a complimentary AWS API Gateway layering in front
of AWS Lambda).&lt;/p&gt;

&lt;p&gt;AWS Lambda provides a lightweight, “server-less” environment to host the
API’s endpoints, which are used to manage the lifecycle of a brand alert,
from creation to deletion. API Gateway, on the other hand, manages the
lifecycle of the API itself and provides valuable features such as access
control and traffic monitoring.&lt;/p&gt;

&lt;p&gt;In the root folder of the project, an &lt;code class=&quot;highlighter-rouge&quot;&gt;api.json&lt;/code&gt; file details resources
and data models of the API and is uploaded to
&lt;a href=&quot;https://app.apibuilder.io/gilt/api-brand-alert/latest&quot;&gt;API Builder&lt;/a&gt;
for versioning and client generation.&lt;/p&gt;

&lt;p&gt;This component also acts as the Data Access Layer to the DynamoDB
database. This ensures that no other component has direct access to the
database, and that any component that needs to interact with the
database must go through the API.
&lt;a href=&quot;http://boto3.readthedocs.io/en/latest/reference/services/dynamodb.html&quot;&gt;Boto3&lt;/a&gt;
library is used to obtain a Python client for DynamoDB.&lt;/p&gt;

&lt;h2 id=&quot;brand-alerts-consumer&quot;&gt;Brand Alerts Consumer&lt;/h2&gt;

&lt;p&gt;The brand alert event messages sent to &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; queue
are picked up by &lt;code class=&quot;highlighter-rouge&quot;&gt;BrandAlertConsumer&lt;/code&gt; (in &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email&lt;/code&gt;). The consumer
polls for messages at a configurable interval. On finding a message in
the queue, the consumer first renders an HTML body from the information
contained in the message. Subsequently, it creates an object wrapper for
the HTML body and sends it to &lt;code class=&quot;highlighter-rouge&quot;&gt;email-gateway&lt;/code&gt; (which then sends it to
our Email Service Provider (ESP), SparkPost, for delivery).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer-email-brand-alert&lt;/code&gt; queue is an Amazon SQS queue and has an
associated Dead Letter Queue (DLQ) for message persistence in case of
failure. This lightweight component is fast, secure, reliable and can
scale elastically.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Since its Production launch in early February, Brand Alerts V2 has been
running smoothly, without fail, every day, in a timely, reliable manner.
The new architecture has emboldened Business, Product and Tech to
outline future iterations, packing more features than ever before.&lt;/p&gt;

&lt;p&gt;For the Tech team, this effort was a win on many levels. We were able to
envision and bring to fruition a micro services architecture, which
promises to be a step up from its previous iteration in all aspects.
In the process, through our research and experimentation, we acquired
knowledge of various AWS tools and other third party libraries.&lt;/p&gt;

&lt;p&gt;Finally, AWS, with its vast set of tools and services, is instrumental
in building powerful, resilient software. We should invest time and
resources in finding the right tools for the job; I promise you it is
well worth the effort.&lt;/p&gt;</content><author><name>Kinshuk Varshney</name></author><category term="aws" /><category term="batch" /><category term="lambda" /><category term="api gateway" /><category term="sqs" /><category term="dynamo" /><category term="sundial" /><category term="trex" /><category term="email" /><category term="architecture" /><summary>Recently, team T-Rex worked on the re-architecture of the
Brand Alerts back end system, a project which we named Brand Alerts V2.
In this blog, I share our new architecture detailing some of the new AWS
powered components.</summary></entry><entry><title>Negative Sampling (in Numpy)</title><link href="http://tech.hbc.com/2018-03-23-negative-sampling-in-numpy.html" rel="alternate" type="text/html" title="Negative Sampling (in Numpy)" /><published>2018-03-23T00:00:00-05:00</published><updated>2018-03-23T00:00:00-05:00</updated><id>http://tech.hbc.com/negative-sampling-in-numpy</id><content type="html" xml:base="http://tech.hbc.com/2018-03-23-negative-sampling-in-numpy.html">&lt;p&gt;&lt;em&gt;Alright, time to have some fun exploring efficient negative sampling implementations in NumPy…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Negative sampling is a technique used to train machine learning models that generally have several order of magnitudes more negative observations compared to positive ones. And in most cases, these negative observations are not given to us explicitly and instead, must be generated somehow. Today, I think the most prevalent usages of negative sampling is in training Word2Vec (or similar) and in training implicit recommendation systems (BPR). In this post, I’m going to frame the problem under the recommendation system setting — sorry NLP fans.&lt;/p&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;For a given user, we have the indices of positive items corresponding to that user. These are items that the user has consumed in the past. We also know the fixed size of the entire item catalog. Oh, we will also assume that the given positive indices are ordered. This is quite a reasonable assumption because positive items are often stored in CSR interaction matrices (err… at least in the world of recommender systems).&lt;/p&gt;

&lt;p&gt;And from this information, we would like to sample from the other (non-positive) items with equal probability.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;item_ind&lt;/th&gt;
      &lt;th&gt;Probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1/8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;bad-ideas&quot;&gt;Bad Ideas&lt;/h1&gt;

&lt;p&gt;We could enumerate all the possible choices of negative items and then use &lt;code class=&quot;highlighter-rouge&quot;&gt;np.random.choice&lt;/code&gt; (or similar). However, as there are usually orders of magnitude more negative items than positive items, this is not memory friendly.&lt;/p&gt;

&lt;h1 id=&quot;incremental-guess-and-check&quot;&gt;Incremental Guess and Check&lt;/h1&gt;

&lt;p&gt;As a trivial (but feasible) solution, we are going to continually sample a random item from our catalog, and keep items if they are not positive. This will continue until we have enough negative samples.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with arbitrary positivity check
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A major downside here is that we are sampling a single value many times — rather than sampling many values once. And although it will be infrequent, we have to re-sample if we get unlucky and randomly choose a positive item.&lt;/p&gt;

&lt;p&gt;This family of strategies will pretty much only differ by how item positivity is checked. We will go through a couple of ways to tinker with the complexity of the positivity check, but keep in mind that the number of positive items is generally small, so these modifications are actually not super-duper important.&lt;/p&gt;

&lt;h2 id=&quot;using-in-operator-on-the-raw-list&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator on the raw list:&lt;/h2&gt;

&lt;p&gt;With a &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, the item positivity check is O(n) as it checks every element of the list.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_naive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with list membership
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-in-operator-on-a-set-created-from-the-list&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator on a set created from the list:&lt;/h2&gt;

&lt;p&gt;Here, we’re going to first convert our &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; into a python &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; which is implemented as a hashtable. Insertion is O(1), so the conversion itself is O(n). However, once the set is created, our item positivity check (set membership) will be O(1) thereon after. So we can expect this to be a nicer strategy if &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp&lt;/code&gt; is large.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with hashtable membership
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-a-binary-search-on-the-list-assuming-its-sorted&quot;&gt;Using a binary search on the list (assuming it’s sorted):&lt;/h2&gt;

&lt;p&gt;One of best things you can do exploit the sortedness of a list is to use binary search. All this does is change our item positivity check to O(log(n)).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bisect&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bisect_left&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bsearch_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bisect_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_val&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_incr_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check with binary search
    `pos_inds` is assumed to be ordered
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsearch_in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negsamp_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Aside: LightFM, a popular recommendation system implements this in Cython. They also have a good reason to implement this in a sequential fashion — but we won’t go into that.)&lt;/p&gt;

&lt;h2 id=&quot;vectorized-binary-search&quot;&gt;Vectorized Binary Search&lt;/h2&gt;

&lt;p&gt;Here we are going to address the issue of incremental generation. All random samples will now be generated and verified in vectorized manners. The upside here is that we will reap the benefits of NumPy’s underlying optimized vector processing. Any positives found during this check will then be masked off. A new problem arises in that if we hit any positives, we will end up returning less samples than prescribed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp&lt;/code&gt; parameter. Yeah, we could fill in the holes with the previously discussed strategies, but let’s just leave it at that.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_vectorized_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Guess and check vectorized
    Assumes that we are allowed to potentially 
    return less than n_samp samples
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'clip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vectorized-pre-verified-binary-search&quot;&gt;Vectorized Pre-verified Binary Search&lt;/h2&gt;

&lt;p&gt;Finally, we are going to address both main pitfalls of the guess-and-check strategies.&lt;/p&gt;

&lt;p&gt;Vectorize: generate all our random samples at once
Pre-verify: no need for an item positivity check
We know how many negative items are available to be sampled since we have the size of our item catalog, and the number of positive items ( &lt;code class=&quot;highlighter-rouge&quot;&gt;len(pos_inds)&lt;/code&gt; is just O(1) ) to subtract off. So let’s sample uniformly over a range of imaginary negative indices with 1–1 correspondence with our negative items. This gives us the correct distribution since we have the correct number of negative item slots to sample from; however, the indices now need to be adjusted.&lt;/p&gt;

&lt;p&gt;To fix our imaginary index, we must add the number of positive items that precede each position. Assuming our positive indices are sorted, this is just a binary search (compliments of np.searchsorted). But keep in mind that in our search, for each positive index, we also need to subtract the number of positive items that precede each position.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negsamp_vectorized_bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Pre-verified with binary search
    `pos_inds` is assumed to be ordered
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Briefly, let’s look at how this works for all possible raw sampled values.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# raw_samp = np.random.randint(0, n_items - len(pos_inds), size=n_samp)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Instead of sampling, see what happens to each possible sampled value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Subtract the number of positive items preceding&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Find where each raw sample fits in our adjusted positive indices&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchsorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_inds_adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Adjust our raw samples&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_samp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;neg_inds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As desired, each of our sampled values has a 1–1 mapping to a negative item.&lt;/p&gt;

&lt;h2 id=&quot;summary-notebook-with-results&quot;&gt;Summary Notebook with Results&lt;/h2&gt;

&lt;p&gt;The notebook linked below compares the implementations discussed in this post in some example scenarios. The previously discussed “Vectorized Pre-verified Binary Search” strategy seems to be the most performant except in the edge case where &lt;code class=&quot;highlighter-rouge&quot;&gt;n_samp=1&lt;/code&gt; where vectorization no longer pays off (in that case, all strategies are very close).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/JasonTam/89ff752d7e35ec17d730c87aea96c19b#file-neg_samp_experiments-ipynb&quot;&gt;Notebook with results&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;concluding-remarks&quot;&gt;Concluding Remarks&lt;/h2&gt;

&lt;p&gt;In models that require negative sample, the sample stage is often a bottleneck in the training process. So even little optimizations like this are pretty helpful.&lt;/p&gt;

&lt;p&gt;Some further thinking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how to efficiently sample for many users at a time (variable length number of positive items)&lt;/li&gt;
  &lt;li&gt;at what point (sparsity of our interaction matrix) does our assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;n_neg_items &amp;gt;&amp;gt; n_pos_items&lt;/code&gt; wreck each implementation&lt;/li&gt;
  &lt;li&gt;how easy is it to modify each implementation to accommodate for custom probability distributions — if we wanted to take item frequency or expose into account&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jason Tam</name></author><category term="numpy" /><category term="sampling" /><category term="python" /><category term="algorithms" /><summary>Alright, time to have some fun exploring efficient negative sampling implementations in NumPy…</summary></entry><entry><title>The Tech Blog is Dead. Long Live the Tech Blog</title><link href="http://tech.hbc.com/2018-03-21-the-tech-blog-is-dead-long-live-the-tech-blog.html" rel="alternate" type="text/html" title="The Tech Blog is Dead. Long Live the Tech Blog" /><published>2018-03-21T00:00:00-05:00</published><updated>2018-03-21T00:00:00-05:00</updated><id>http://tech.hbc.com/the-tech-blog-is-dead-long-live-the-tech-blog</id><content type="html" xml:base="http://tech.hbc.com/2018-03-21-the-tech-blog-is-dead-long-live-the-tech-blog.html">&lt;h1 id=&quot;the-hbc-tech-blog-you-will-never-find-a-more-wretched-hive-of-tech-and-miscellany&quot;&gt;The HBC Tech Blog: “You will never find a more wretched hive of tech and miscellany.”&lt;/h1&gt;

&lt;p&gt;There’s an urban legend that maintains that your body replaces its cells
every seven years. It turns out that’s not quite true; yet, the sentiment is
inspiring, and matches some advice my college professor once offered: every
seven years or so, &lt;em&gt;reinvent yourself&lt;/em&gt;. We’re excited today to announce that,
after seven years of tech.gilt.com, we’re reinventing the Gilt Tech Blog:
welcome, friends, to the &lt;em&gt;HBC Tech Blog&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can continue to expect the same mix of insight, fun and tech miscellany
since our first post on &lt;a href=&quot;http://tech.hbc.com/2011-02-08-tips-for-optimizing-iphone-ipad-applications.html&quot; target=&quot;_blank&quot;&gt;tips of optimising iPhone applications&lt;/a&gt; back in 2011.
Since then, we’ve enjoyed insights like &lt;a href=&quot;http://tech.hbc.com/2011-03-02-the-rule-of-4.html&quot; target=&quot;_blank&quot;&gt;the rule of four&lt;/a&gt;; &lt;a href=&quot;http://tech.hbc.com/2013-03-26-26-3-13-todays-noon-outage-and-what-were-doing.html&quot; target=&quot;_blank&quot;&gt;contrite
apologies on unintended outages&lt;/a&gt;; &lt;a href=&quot;http://tech.hbc.com/2017-01-25-perfect-overnight-cold-brew.html&quot; target=&quot;_blank&quot;&gt;notes on how to make the perfect overnight
cold-brew&lt;/a&gt;; &lt;a href=&quot;http://tech.hbc.com/2014-10-17-haiku-by-the-gilt-tech-team-in-japan.html&quot; target=&quot;_blank&quot;&gt;the art of delivering the weekly tech update via Haiku&lt;/a&gt;; and, the
infamous &lt;a href=&quot;http://tech.hbc.com/2014-10-29-stilettos-by-state-a-gilt-infographic-while.html&quot; target=&quot;_blank&quot;&gt;infographic of US stiletto heel-size preference by-state&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you like the new look and new layout; big thanks to our in-house design
team! Now, if we still have your attention, read on to learn why we bother
writing a tech blog at all, and how we go about about it.&lt;/p&gt;

&lt;h1 id=&quot;what-makes-a-good-tech-blog-freedom-gateway-drugs-and-raw-desire&quot;&gt;What makes a good tech blog? Freedom, gateway drugs, and raw desire.&lt;/h1&gt;

&lt;p&gt;While our organisation’s cell structure has changed over time, our core DNA
remains the same: we’ve always taken joy in contributing to the wider tech
community, be it through speaking, writing or coding in an open and transparent
way. That said, it’s good to take this opportunity to perform a retrospective
and ask some key questions: why bother writing a tech blog? How do we know it’s
working? And, if you’re a tech team considering creating your own blog, how
should you go about doing it?&lt;/p&gt;

&lt;p&gt;The Gilt Tech Blog started as an experiment in freedom of expression: we granted
everyone in Gilt Tech access to publish to the blog (then hosted in Tumblr),
without any need for permission or review. The bet was simple: we’d make it easy
for the team to publish their thoughts, and trust them to write content that was
worthwhile and interesting. The public nature of the blog would ensure that
contributions were accurate, fair, and high-quality. Our engineers had already
noted that when writing code for open-source projects, the quality of the code
was always &lt;em&gt;higher&lt;/em&gt; than internal code; we figured the same dynamic would apply
to our writing. That bet paid off: we’ve had many contributions from across our
engineering, product, data, UX and product teams of very high quality.&lt;/p&gt;

&lt;p&gt;When we moved the blog to Github Pages, our publication process matured
to a ‘pull request’ model. Authors write articles using Markdown, and can
commit ‘gh-pages’ branch to publish immediately, or, seek critical
review first through Github’s review mechanism. Generally, our approach to
reviewing either code or content is to give transparent and constructive
feedback, that the author can choose to ignore or take on board. More often than
not, the author takes any critique on board, and the quality of the final
article is better than what one mind alone could produce.&lt;/p&gt;

&lt;p&gt;The combination of distributed editorial freedom and Github Pages makes the
mechanics of publishing easy. The next challenge is: how do you generate the
content? Looking back there were a couple of things we did to build blogging
into the tech culture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Encourage&lt;/em&gt;: most likely, if you’re still reading, you’ve already got an
interest in setting up your own blog. That means you have a few ideas
for your first articles, and an initial seed-group of authors. Get stuck
in and get your first articles out there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Celebrate&lt;/em&gt;; as articles get shared, posted and liked, share that feedback with
your wider tech team. Nothing breeds success like success.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nudge&lt;/em&gt;: We found that, while a core crew were prolific in their contributions,
we had a wider group of people in the organisation who had stories to tell but
couldn’t get over the hurdle of writing that first article. At the time, we had
a dedicated Tech Evangelist, and one of the great things she did was &lt;em&gt;nudge&lt;/em&gt;
people. She’d watch out for features releases, new technologies we were dabbling
in, cultural stories, and off-the-wall observations. Our ‘5@4’ meetings and
all-hands presentations turned out to be one of the ‘gateway drugs’ to blogging:
anyone who presented at these meetings had already done the legwork to create a
narrative around something interesting they were working on. We found that all
we needed was a little nudge, and a couple of hours work, to turn that gem into
a blog post.&lt;/p&gt;

&lt;p&gt;In the early days, we used to track the blog using KPIs like number of views,
number of likes, number of articles per month, etc. We don’t tend to do that
anymore; still, we do get excited when we see a post getting lots of likes!
At this stage, the blog runs itself. That’s a great result. Think about it:
in January of 2018 we had four articles posted &lt;em&gt;without asking, nudging,
pestering, or cajoling anyone&lt;/em&gt;. It’s pretty much down now to the team’s raw
desire to share what they’re learning. The blog has become the ultimate,
authentic, organisational expression of “this is who we are, this is what we
do.”&lt;/p&gt;

&lt;p&gt;To our authors, thank you. To our readers, thanks for hanging with us, and, we
hope you continue to enjoy the ride. And, to anyone out there setting up your
own tech blog, we hope the advice above is helpful in getting started.&lt;/p&gt;</content><author><name>Adrian Trenaman</name></author><category term="blogging" /><category term="culture" /><category term="brand" /><summary>The HBC Tech Blog: “You will never find a more wretched hive of tech and miscellany.”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://tech.hbc.com{&quot;feature&quot;=&gt;&quot;the-tech-blog-is-dead-long-live-the-tech-blog/Kuopio_logs.jpg&quot;}" /></entry><entry><title>Airing Out A New Job System</title><link href="http://tech.hbc.com/2018-03-05-airing-out-a-new-job-system.html" rel="alternate" type="text/html" title="Airing Out A New Job System" /><published>2018-03-05T00:00:00-05:00</published><updated>2018-03-05T00:00:00-05:00</updated><id>http://tech.hbc.com/airing-out-a-new-job-system</id><content type="html" xml:base="http://tech.hbc.com/2018-03-05-airing-out-a-new-job-system.html">&lt;p&gt;In this article I’ll be sharing some of the knowledge the Data team at Gilt picked up in replacing our old job system with Apache Airflow. 
We undertook the decision to overhaul our job orchestration system a few months ago due to a number of reasons but have now successfully migrated all our data ingestion jobs to the new system.&lt;/p&gt;

&lt;p&gt;Firstly a little bit about our team. The Data Team at Gilt is responsible for constructing, delivering, and supporting all systems and services which enable self-service analytics
and data science across all banners and all functions at Hudson’s Bay Corp (HBC).
The scope of responsibilities begins with data ingestion, and ends with supporting our user community of BI tool uses and data scientists. 
These varieties of sources and types of processing lead us to review our job orchestration and I’ll be sharing the challenges involved, attempted solutions and lessons learned.&lt;/p&gt;

&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the beginning…&lt;/h2&gt;

&lt;p&gt;The Data team has various jobs that handle the ingestion of data from multiple sources in a variety of formats. 
Each of these sources have either strict integration guidelines regarding time of ingestion or require coordination between various jobs to ensure correct ingestion. 
This leads to numerous issues surrounding job scheduling, coordination and success criteria. We solved these issues with using our internally built job system &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As times changed, we wanted to take a fresh approach to how jobs were provisioned from a AWS point of view. 
The jobs we use are lightweight and having them running on ECS instances around the clock when they were idle was deemed as a waste of resources. 
It made sense to us to move the jobs to AWS batch instances to limit the cost of running jobs while still maintaining all the benefits of ECS. 
This lead to some problems with our Sundial job system due to the fact that at the time it didn’t support AWS Batch. 
This has changed since then with some great work by our personalisation team which you can read more about &lt;a href=&quot;http://tech.hbc.com/2017-08-04-sundial-batch.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;time-for-something-new&quot;&gt;Time for something new…&lt;/h2&gt;

&lt;p&gt;The team decided it was time to take a fresh approach to how we ran our jobs, which kicked off the investigation of a new system. 
The investigation took place over a few weeks and spanned across a number of open source solutions. 
We outlined that a new job system should at minimum support a number of features&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should be able to integrate with AWS Batch&lt;/li&gt;
  &lt;li&gt;Have a rich feature list inline with what was available in Sundial&lt;/li&gt;
  &lt;li&gt;Have the ability to contribute new features and expand existing functionality&lt;/li&gt;
  &lt;li&gt;Have the ability to have rich visualization of jobs and their dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were able to whittle down the numerous possibilities to three possible solutions. 
The first being Spotify’s Luigi system, available &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;here&lt;/a&gt; which is a really great solution and was ticking most of our boxes. 
We decided it was worthwhile to generate a proof of concept approach to really trial the solution. Luigi has been around for a long time and has rich user base which was a positive factor for us when considering it as our solution. 
It was a really close call between Luigi and the solution that we picked mainly because Luigi provides a lot of the features we are looking for.&lt;/p&gt;

&lt;p&gt;The second solution we investigated was LinkedIn’s Azkaban workflow manager, available &lt;a href=&quot;https://github.com/azkaban/azkaban&quot;&gt;here&lt;/a&gt;.
Being based in java was probably closer to our comfort zone which was a plus for this project.&lt;/p&gt;

&lt;p&gt;What we found out was that although it satisfied our needs with regards rich visualization of the jobs and their dependencies there was some drawbacks to the solution. 
It seems to be solely focused on orchestrating hadoop based jobs while we require a solution that allows us to interact with a number of possible executors, namely AWS Batch and EMR. 
It’s feature list is expansive and could prove a perfect solution for those interested in running only hadoop based jobs.&lt;/p&gt;

&lt;p&gt;The final solution was AirBnB’s Airflow solution which at the time was just picked up by the &lt;a href=&quot;https://github.com/apache/incubator-airflow&quot;&gt;Apache Foundation&lt;/a&gt;. 
Airflow was known to some of the people here in HBC but when they investigated it, it was still in its infancy and was missing a lot of features. 
We decided to see what progress was made since the last time it was looked at and we were pleased with the improvements. 
It was ticking all the boxes and after one of the engineers here did a proof of concept we decided it was the way forward for us.&lt;/p&gt;

&lt;p&gt;For a quick reference between Luigi vs Airflow, this is a great &lt;a href=&quot;http://bytepawn.com/luigi-airflow-pinball.html&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-first-attempt&quot;&gt;The first attempt…&lt;/h2&gt;

&lt;p&gt;Implementing the Airflow solution was a slight bit tricky for us at the beginning. 
A lot of the team’s expertise was based in Scala, so implementing a python based solution created a great opportunity to learn about the language.&lt;/p&gt;

&lt;p&gt;Early into the project one of our interests was to figure out how to deploy Airflow to our AWS account and how do we then deploy the DAGs to the instance. 
We addressed the first by standing up an ECS cluster with Airflow installed on it. 
For the second we setup  the ECS instances with a cron job that would pull down any changes that was pushed to the S3 bucket.&lt;/p&gt;

&lt;p&gt;We were able to successfully migrate all our existing jobs into DAGs and with some of the additions we made to the code allowed us to integrate nicely with our AWS tools such as Batch, 
SNS and Lambda&lt;/p&gt;

&lt;p&gt;In this attempt, we decided to fork the master branch of Airflow and use that as a source for us to deploy to ECS. 
This gave us some benefits such as customizing some of Airflows base code to provide us with some extra functionality. 
After some soul searching however, we decided that this perhaps was not the best approach. Maintaining the branch and our additional code could create a maintenance issue for us in the future, 
for example an incompatible change with our additional code. We decided that there must be a better way.&lt;/p&gt;

&lt;h2 id=&quot;the-refinement&quot;&gt;The refinement…&lt;/h2&gt;

&lt;p&gt;In the first attempt we figured out lot of the early problems with Airflow but we decided that maintaining the forked version was going to cause trouble down the road.
To try fix this, we decided to get a vanilla based Airflow instance up and running. This was partly to help with maintaining the system going forward since we didn’t want to have to constantly merge changes from the master branch into our fork.
This decision coupled with our earlier decision to change some of Airflows base code caused some problems for us.&lt;/p&gt;

&lt;p&gt;We decided to go with the latest release of Airflow (1.9) and create a fully dockerised version of Airflow with our DAG’s.
Luckily there are people already working in this space and we were able to source a lot of the work required from this &lt;a href=&quot;https://github.com/puckel/docker-airflow&quot;&gt;repository&lt;/a&gt;.&lt;br /&gt;
To migrate the base code that we changed, we found out that Airflow had already solved this problems via it’s &lt;a href=&quot;https://airflow.incubator.apache.org/plugins.html&quot;&gt;Plugin system&lt;/a&gt;.&lt;br /&gt;
The plugin system gives us a nice way of expanding our functionality and hopefully releasing our plugins as an open sourced in the future.&lt;/p&gt;

&lt;p&gt;This process had its challenges but there is a great community of Airflow users and we were able to get a lot of help. Some of the sources we used were Stack Overflow and the ever busy Apache Airflow gitter.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Now that we have our Airflow setup and jobs migrated we are experiencing the full benefits of what airflow has to offer. 
Within a day we were able to create plugins that allow us to integrate with AWS EMR. This allowed the creation of DAG’s that will in the future support the migration of our ELT process to ETL using Spark, a big 2018 and 2019 initiative here at Gilt/HBC. 
We are eagerly awaiting the improved DAG deployment system thats coming to Airflow to improve our deployment process but we feel we are in a good place with it at the moment.&lt;/p&gt;

&lt;p&gt;The Data teams roadmap has multiple exciting challenges to solve from ingestion, transformation to loading. 
Having our Airflow setup, we feel we are in a good position now to tackle these problems.&lt;/p&gt;

&lt;p&gt;A big callout to &lt;a href=&quot;https://github.com/dmateusp&quot;&gt;Daniel Mateus Pires&lt;/a&gt; who acted as our go to person in all things Airflow.&lt;/p&gt;

&lt;p&gt;Over the new month or so we are really going to ramp up and if you’re interested in helping us solve these problems, take a look at our careers page &lt;a href=&quot;https://www.linkedin.com/jobs/search/?f_C=167354%2C1453743&amp;amp;locationId=OTHERS.worldwide&quot;&gt;here&lt;/a&gt; and get in touch.&lt;/p&gt;</content><author><name>[&quot;Terry McCartan&quot;]</name></author><category term="airflow" /><category term="aws" /><category term="docker" /><category term="tech" /><category term="data" /><category term="etl" /><category term="scheduling" /><summary>In this article I’ll be sharing some of the knowledge the Data team at Gilt picked up in replacing our old job system with Apache Airflow. 
We undertook the decision to overhaul our job orchestration system a few months ago due to a number of reasons but have now successfully migrated all our data ingestion jobs to the new system.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://tech.hbc.com{&quot;feature&quot;=&gt;&quot;airing-out-a-new-job-system/feature-image-airflow.jpg&quot;}" /></entry><entry><title>AWS SDK for Java, version 2.0</title><link href="http://tech.hbc.com/2018-01-26-aws-sdk-for-java.html" rel="alternate" type="text/html" title="AWS SDK for Java, version 2.0" /><published>2018-01-26T00:00:00-05:00</published><updated>2018-01-26T00:00:00-05:00</updated><id>http://tech.hbc.com/aws-sdk-for-java</id><content type="html" xml:base="http://tech.hbc.com/2018-01-26-aws-sdk-for-java.html">&lt;p&gt;The Capital Region AWS User Group met on January 18th at the &lt;a href=&quot;https://sunypoly.edu/research/albany-nanotech-complex.html&quot;&gt;Nanotech Complex&lt;/a&gt; in Albany New York. &lt;a href=&quot;https://www.commercehub.com/&quot;&gt;CommerceHub&lt;/a&gt; hosted the meeting at their main office.&lt;/p&gt;

&lt;p&gt;The topic of this month’s meetup was the AWS SDK for Java. At HBC, our development teams use the SDK to access AWS services such as DynamoDB, S3, CloudWatch, and SNS. The v1 SDK has been a core building block at HBC since 2014.&lt;/p&gt;

&lt;p&gt;In June 2017, Amazon released a new implementation of the SDK for Java.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-june-2017.png&quot; alt=&quot;aws-sdk-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The version 2.0 SDK is available as a developer preview. HBC is evaluating the new SDK and we look forward to using it in production later this year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-github-v2-sdk.png&quot; alt=&quot;aws-sdk-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our engineering team has already started incorporating the v2 SDK into our helper libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gfc-aws-cloudwatch – &lt;a href=&quot;https://github.com/gilt/gfc-aws-cloudwatch/pull/8/&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;gfc-s3-cache – &lt;a href=&quot;https://github.com/gilt/gfc-s3-cache/pull/4&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The v2 API uses  &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;java.util.concurrent.CompletableFuture&lt;/a&gt; to encapsulate the result of an AWS service call. HBC’s Scala libraries will use &lt;a href=&quot;https://github.com/scala/scala-java8-compat/blob/master/src/main/scala/scala/compat/java8/FutureConverters.scala&quot;&gt;FutureConverters&lt;/a&gt; to convert Java CompletableFuture objects into Scala Future objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-futureconverters.png&quot; alt=&quot;aws-sdk-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about the v2 SDK, review my slidedeck or watch Kyle Thomson’s re:invent 2017 presentation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/aws-sdk-for-java-version-2-dot-0-albany-ny-january-18-2018&quot;&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/AWS_SDK_for_Java-speakerdeck-albany-480.png&quot; alt=&quot;aws-sdk-java-speakerdeck-albany-image&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=byRois3s5Yc&quot;&gt;&lt;img src=&quot;/assets/images/aws-sdk-for-java/aws-sdk-java-version-2_0-kyle-reinvent-youtube-480.png&quot; alt=&quot;aws-reinvent-2017-kyle-thomson-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Sean Sullivan</name></author><category term="aws" /><category term="java" /><category term="scala" /><category term="cloud" /><category term="albany" /><category term="newyork" /><category term="2018" /><summary>The Capital Region AWS User Group met on January 18th at the Nanotech Complex in Albany New York. CommerceHub hosted the meeting at their main office.</summary></entry><entry><title>Career Structure. It doesn’t matter. Until it matters.</title><link href="http://tech.hbc.com/2018-01-24-career-structure.html" rel="alternate" type="text/html" title="Career Structure. It doesn't matter. Until it matters." /><published>2018-01-24T00:00:00-05:00</published><updated>2018-01-24T00:00:00-05:00</updated><id>http://tech.hbc.com/career-structure</id><content type="html" xml:base="http://tech.hbc.com/2018-01-24-career-structure.html">&lt;p&gt;In this article, I’m going to talk about career structure, career development, and career titles in a tech organisation. This post is more about organisational development than it is about technology; however, on the grounds that the health of your architecture and technology choices will be somewhat isomorphic to the health of your organisation, I believe this to be a worthwhile read for any engineering leader. I’m also writing this for anyone who is considering joining HBC Tech, so that they can understand our approach, and the meaning we give to our titles.&lt;/p&gt;

&lt;p&gt;I’ll cover our motivation and need for a career structure, the core principles that drove our solution, and, perhaps most importantly, our experience in transitioning to that solution in a Dunbar-sized technology organisation at HBC Tech.&lt;/p&gt;

&lt;h3 id=&quot;i-dont-care-about-my-title&quot;&gt;“I don’t care about my title.”&lt;/h3&gt;
&lt;p&gt;Titles are an amazing thing. When I joined Gilt in 2011, I didn’t care about titles; I was happy to shed my shiny ‘Distinguished Engineer’ title from IONA Technologies and join Gilt as a Senior Engineer. It was easy: the general rule was that every engineer at Gilt apart from our CTO was a Senior Engineer, and the democratic, meritocratic, startup culture obviated the need for titles.&lt;/p&gt;

&lt;p&gt;However, over time something interesting happened, not quite to me directly, but to the organisation as a whole. Blips started to appear in the organisational title space - a new hire would arrive as a ‘Principal’, and peers would wonder “what does that mean?”. Or, someone would become a team lead, or Director of Engineering, which begged the question: is that higher than an Engineer, or, somehow equivalent? And then blips started attracting attention from &lt;em&gt;outside&lt;/em&gt; of our organisational radar: our team would see their peers in the industry getting promotions and fancy titles, and wonder were they somehow stagnating in their careers?&lt;/p&gt;

&lt;p&gt;Organisations develop and grow over time; the tech leadership team at Gilt realised in February of 2013 that the organisation needed and wanted a clear career structure, something different from our original loose, startup-y approach. The career structure we landed on at Gilt worked well for us in the subsequent three years. More recently in 2017 we set out to create a career structure for the larger HBC Tech organisation; we wanted to design it carefully so that it would align with our cultural values and learn form our experience. We started with a few principles to guide our thoughts.&lt;/p&gt;

&lt;h3 id=&quot;the-principles&quot;&gt;The principles&lt;/h3&gt;

&lt;p&gt;Here’s what we felt was important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Meritocracy (or, you &lt;em&gt;earn&lt;/em&gt; your title)&lt;/strong&gt;: No-one is ‘entitled’ to a title: just because you’ve been here a while, doesn’t mean you qualify for a promotion. Ever. We expect you to perform at the next level for sustained period - at least six months - before you can get promoted. A good metric of your success in this regard is that your promotion should be a surprise to &lt;em&gt;nobody&lt;/em&gt;; the only surprise should be a colleague saying “Hey, I thought you were at that level already!”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Equivalence of Individual Contributors and People Leads&lt;/strong&gt;: We feel strongly about this. We hire talented people who design and build great things, and we wanted to create a career development path that encourages development in the skill that make you great. &lt;em&gt;No one should ever feel that they have to become “a manager” to get promoted&lt;/em&gt;. Equivalence should apply to compensation, but also in day-to-day operations: for example, in our Dublin office we extended our regular “Dublin Leads Meeting” to a “Dublin Leads &amp;amp; Principals Meeting”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;We want Leaders, not Managers&lt;/strong&gt;: When you have talented individuals, working in small autonomous well-knit teams, you don’t need to manage. We develop our leaders from within: for us, leaders are people who love their craft, but also get a real kick out of leading people: showing the way, setting direction, getting alignment, and making the team successful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Encourage people to try leadership out, with a route back to Individual Contributor&lt;/strong&gt;: The idea of putting &lt;em&gt;yourself&lt;/em&gt; forward as a team lead is daunting for many individual contributors; some of that may be down to humility (“Why do I think I’m better equipped to lead than everyone else on my team?”), or fear of failure (“What happens if I’m just not good at this?”). Perhaps the biggest fear is the idea of losing your grasp on the skills and talents that make you great as an engineer in the first place. We wanted to create an environment where individual contributors could experiment with leadership roles, and have an avenue back to individual contributor later should they so desire. I must confess: the first time I saw a team lead return to an individual contributor engineering role and be replaced by another more junior team member as lead, I honestly thought it would never work. I was wrong. The original lead (now engineer) and new lead just got stuck in at what they were good at, and the team was great.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these principles in place, the question became “What kind of career structure can support this?”&lt;/p&gt;

&lt;h3 id=&quot;what-do-other-organisations-do-about-career-titles&quot;&gt;What do other organisations do about career titles?&lt;/h3&gt;

&lt;p&gt;We triangulated ourselves off our understanding of organisations like Netflix, Facebook and Google, and how they manage their career structures. Organisations don’t often publish their career structure; however, pulling together from a number of sources and contacts, we saw some interesting patterns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Netflix&lt;/strong&gt;: Netflix operates a very simple structure. Ultimately, every engineer is a Senior Engineer, and there is a separate track for leadership, including Manager, Director, VP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Google&lt;/strong&gt;: Google has a multi-tier ‘levelled’ system, with individual contributor levels ranging from &lt;em&gt;Level 1: Software Engineer I&lt;/em&gt; to &lt;em&gt;Level 10: Senior Google Fellow&lt;/em&gt;, and a parallel engineering management track that ranges from level 5 to level 10.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Facebook also has a multi-tier ‘levelled’ system. Engineers range from &lt;em&gt;Level 3 - Software Engineer&lt;/em&gt; up to a &lt;em&gt;Level 9&lt;/em&gt;, with associated &lt;em&gt;Manager&lt;/em&gt; and &lt;em&gt;Director&lt;/em&gt; roles on a parallel track above &lt;em&gt;Level 5&lt;/em&gt;. Anecdotally, once an individual elects into the management track, the intent is that they will remain in that track.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gilt&lt;/strong&gt;: At Gilt, pre-2013 we had a structure similar to Netflix (see above!), and we found that this structure didn’t give a compelling career prospect for individual contributors in our engineering teams. Ironically, for tech team with a strong startup mentality, we looked to the industry and adopted what outwardly seems to be a fairly &lt;em&gt;traditional&lt;/em&gt; approach. Based on the &lt;a href=&quot;https://radford.aon.com/insights/articles/2015/radford-global-job-leveling&quot;&gt;Radford&lt;/a&gt; methodology, we created a career path and approach that had the following qualities:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Recognised different levels of ability, impact, contribution, scope and influence across individual contributor and leadership tracks; and,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Encouraged folk to jump across the Individual Contributor / Leadership boundary as their career develops.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The roll-out of the approach at Gilt was positive: it became clearer to staff who their peers were, and what ‘the next level’ really looked like. Career development discussions went from the abstract to the concrete. Perhaps the biggest result was that a generation of individual contributors, who had resisted the idea of taking on a leadership role, gave leadership a try &lt;em&gt;and discovered they were good at it&lt;/em&gt;. More-so, on our engineering teams, we developed a culture of ‘leaders-who-code’: we found that engineering leads up to the level of Director and Senior Director continued to make significant impacts in terms on engineering contributions. Result!&lt;/p&gt;

&lt;h3 id=&quot;the-hbc-tech-career-path&quot;&gt;The HBC Tech Career Path&lt;/h3&gt;

&lt;p&gt;After HBC acquired Gilt in 2016, the subsequent merger of the tech teams presented a challenge in terms of career paths: which career structure should we adopt, the existing HBC career structure, or, the Gilt career structure? Rather than just pick one of the existing, we took the opportunity to rethink both, and, landed on a structure loosely modelled on the ideas from Radford, Google and Gilt, as per the table below.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level&lt;/th&gt;
      &lt;th&gt;Individual Contributor&lt;/th&gt;
      &lt;th&gt;Leadership&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Software Engineer I&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Software Engineer II&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Software Engineer III&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Senior Engineer&lt;/td&gt;
      &lt;td&gt;Lead Engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Staff Engineer&lt;/td&gt;
      &lt;td&gt;Senior Lead Engineer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Principal Engineer&lt;/td&gt;
      &lt;td&gt;Director of Engineering&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Distinguished Engineer&lt;/td&gt;
      &lt;td&gt;Senior Director of Engineering&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Fellow&lt;/td&gt;
      &lt;td&gt;VP Engineering&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;SVP Engineering&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This approach has all the qualities we were looking for: equality of levels, ability to experiment with leadership at the senior level, and supported our culture of valuing leadership and autonomy rather than management and rule.&lt;/p&gt;

&lt;p&gt;For each level, we worked out key indicators of what it means to be at that level. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Level of knowledge&lt;/strong&gt;: how much domain knowledge / expertise is required and expected at a particular level?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Job complexity&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Supervision&lt;/strong&gt;: how much supervision / hand-holding should we expect the individual to need at a particular level?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Experience&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sphere of influence&lt;/strong&gt;. This is one of my favourite indicators: at early levels, the sphere of influence is really ‘self’. As we get to subsequent levels, we expect individual contributors and leads to influence their teams, department, tech, the wider organisation, and the industry &amp;amp; community.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Team size (for leads)&lt;/strong&gt;. There’s some good rules of thumb in terms of team size:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Lead Level&lt;/th&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Team size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Lead Engineer&lt;/td&gt;
      &lt;td&gt;7 ± 2 (a pizza size team)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Senior Lead&lt;/td&gt;
      &lt;td&gt;10 ± 2 (a large team, or team of teams)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Director&lt;/td&gt;
      &lt;td&gt;20 ± 4 (a classroom-size team of teams)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Senior Director&lt;/td&gt;
      &lt;td&gt;25+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;VP Engineering&lt;/td&gt;
      &lt;td&gt;~80 (e.g. an engineering site / office)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;SVP Engineering&lt;/td&gt;
      &lt;td&gt;~150 (a Dunbar)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Accountability&lt;/strong&gt;: what are the systems that you own / are responsible for. How critical are they to the business?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One big learning is that these indicators are only &lt;em&gt;guidelines&lt;/em&gt;. I dislike the idea of career advancement being a box-ticking exercise: there is a qualitative judgement that we as leaders need to apply, and sometimes a candidate’s excellence in one area may make up for a deficiency in another, or, make up for organisational blockers. For example, we once had a Director of Engineering with a small team of four or five reports; you could argue that this Director didn’t have a large enough team to warrant the title. However, when we considered his technical ability, the scope of the role, the level of accountability, and, the fact that we would most likely never have a classroom size team in this area, we felt great about promoting.&lt;/p&gt;

&lt;p&gt;Qualitative judgement of levels is, of course, hard. One idea we found helpful was to look at &lt;em&gt;peer groups&lt;/em&gt;, to ensure that staff at the same level are in the same peer group. If we find that a member of staff ended up grouped with other members who seem at a different level, we re-examine the case to make sure our evaluation has been correct and fair.&lt;/p&gt;

&lt;h3 id=&quot;rolling-out-a-career-path&quot;&gt;Rolling out a Career Path&lt;/h3&gt;

&lt;p&gt;With our new career path in place we then had to figure out how to roll it out. Ultimately, rolling out a new career structure means you may be changing your people’s titles: we want to make sure that we did that in a sensitive and proactive way. For example: if someone’s existing title is ‘Software Engineer’, then the question is what level are they in the new system (I, II, III)? How will someone feel if they think they’re a III, but we think they’re a II?&lt;/p&gt;

&lt;p&gt;We settled on a couple of core ideas to help us make a smooth transition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are no salary or bonus adjustments as part of transitioning to the new structure. No one gets a pay cut, no one gets a pay rise: the focus is on getting the track and level right.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We apply the level &lt;em&gt;as is&lt;/em&gt;: there are &lt;em&gt;no&lt;/em&gt; promotions as part of the levelling. We didn’t want to use this exercise as a way for folk to canvas for a promotion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We involved each individual in the selection of their level, through 1:1s with their current directors and leads. At the end of the exercise, everyone knows their level (1-9) and track (Individual Contributor / Lead), and has been part of the process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Individuals can adopt their new title publicly if they wish, or retain their current title. Whatever about our internal career titles, we didn’t feel it was right to force people to change their LinkedIn profiles!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Everyone gets evaluated at their level and track going forward. This is a nice feedback loop back to having individuals involved in the selection of their role! Sure, maybe you did persuade your lead that you’re a Software Engineer III: if so, then you’ll be evaluated against your peers… you better be up to it :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So then, we began the roll out! With a Dunbar-sized subset of the organisation we formulated a simple plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Communicate: let everyone know what’s going on! You really can’t communicate enough on these things: despite your best intentions, there will always be someone who “didn’t get the memo” or wasn’t there when you talked about it at an All Hands meeting. Communicate often across multiple channels, and be mindful of people who may not have missed out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Educate: after the initial communications, we moved to educate our folk in groups of about 20, with a one-hour walkthrough of the career path, where it came from, why it’s important, and backed up with all the materials. This is a nice ‘classroom’ size: big enough to scale the communications, but small enough that folk feel comfortable  talking about the issues, and asking questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get personal: after the education sessions, we ran our 1:1s with folk to settle levels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Close the loop with HR! In almost every organisation I’ve ever worked for, the system HR uses to store titles and levels has been different from the spreadsheet I’ve been working off. It’s crazy after all this levelling work to think that six months later someone might get an official letter with the &lt;em&gt;wrong title&lt;/em&gt;! As a general rule in life, it’s always good to &lt;em&gt;hammer the nail all the way in&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;its-nice-to-have-a-title-so-then-you-dont-have-to-care-about-it-any-more&quot;&gt;“It’s nice to have a title, so then you don’t have to care about it any more.”&lt;/h3&gt;

&lt;p&gt;The irony of &lt;em&gt;all&lt;/em&gt; of this is that, really, still, I don’t care much about titles! When I was a tech consultant in a previous job we always had this saying: “You’re only ever as good as your last gig.” Likewise, when it comes to titles, there’s no resting on your laurels, proudly shining and polishing your trophy title: you must deliver, every day, for your team and for the organisation. That said, there are a couple of real benefits that we’ve seen from this work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Having clarity on titles means that any fear, uncertainty, envy, distrust related to previous title confusion is now gone. Everyone knows where they are, and can just get down to work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Career development conversations just got a whole lot more interesting. Now we can have meaningful conversations with our staff on where they are, where they want to go, and, how they can get there.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final piece of advice: title systems and career paths are frameworks that exist to help us; they’re a tool that should enable us, not restrict us or box us in. While we have leaders-who-code (e.g. directors of engineering optimising our caching architecture), we also have coders-who-lead on some of our teams (e.g. principal engineers leading teams working on a technical area like ElasticSearch); and, this is as it should be. We flex the framework to our needs. And, if we find that this framework breaks, we’ll fix it, and perhaps write another post to let you know what we learnt.&lt;/p&gt;</content><author><name>Adrian Trenaman</name></author><category term="culture" /><category term="career path" /><category term="titles" /><summary>In this article, I’m going to talk about career structure, career development, and career titles in a tech organisation. This post is more about organisational development than it is about technology; however, on the grounds that the health of your architecture and technology choices will be somewhat isomorphic to the health of your organisation, I believe this to be a worthwhile read for any engineering leader. I’m also writing this for anyone who is considering joining HBC Tech, so that they can understand our approach, and the meaning we give to our titles.</summary></entry><entry><title>Sundial AWS EMR Integration</title><link href="http://tech.hbc.com/2018-01-16-sundial-aws-emr-integration.html" rel="alternate" type="text/html" title="Sundial AWS EMR Integration" /><published>2018-01-16T00:00:00-05:00</published><updated>2018-01-16T00:00:00-05:00</updated><id>http://tech.hbc.com/sundial-aws-emr-integration</id><content type="html" xml:base="http://tech.hbc.com/2018-01-16-sundial-aws-emr-integration.html">&lt;h1 id=&quot;aws-elastic-map-reduce-on-sundial&quot;&gt;AWS Elastic Map Reduce on Sundial&lt;/h1&gt;

&lt;p&gt;Today I want to talk about a recent improvement we implemented in &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt;, an Open Source product launched by Gilt in early 2016. With &lt;a href=&quot;https://github.com/gilt/sundial/releases/tag/v2.0.0&quot;&gt;Sundial 2.0.0&lt;/a&gt; it’s now possible to schedule AWS Elastic Map Reduce jobs.&lt;/p&gt;

&lt;p&gt;For those of you who are not familiar with it, &lt;a href=&quot;https://github.com/gilt/sundial&quot;&gt;Sundial&lt;/a&gt; is a batch job scheduler, developed by the Gilt Personalization Team, that works with Amazon ECS and Amazon Batch.&lt;/p&gt;

&lt;p&gt;Before jumping into the nitty gritty details, it’s worth taking a deeper dive into the current batch job processing setup in Gilt and the challenges we have recently started to face.&lt;/p&gt;

&lt;p&gt;We will quickly cover the following areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the current batch jobs setup&lt;/li&gt;
  &lt;li&gt;batch job scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;batch-processing-today&quot;&gt;Batch processing today&lt;/h2&gt;

&lt;p&gt;Every night, the Gilt Aster data warehouse (DW) is locked down in order to update it with the latest data coming from the relevant area of the business. During this lock, Extract-Transform-Load (&lt;a href=&quot;https://www.webopedia.com/TERM/E/ETL.html&quot;&gt;ETL&lt;/a&gt;) suites, or &lt;a href=&quot;https://www.ironsidegroup.com/2015/03/01/_ETL_-vs-elt-whats-the-big-difference/&quot;&gt;ELT as we prefer to call it&lt;/a&gt;, are
run. 
When all the jobs complete, the DW gets unlocked and the normal access to Aster is resumed. There are a number of client systems relying on the DW, most relevant are BI tools, i.e &lt;a href=&quot;https://looker.com/&quot;&gt;Looker&lt;/a&gt;, and Sundial.
Sundial in particular is used in personalization for scheduling additional jobs and to build Machine Learning models. Since there is no synchronization between Aster and Sundial, occasionally when Aster takes longer to complete, Sundial jobs would fail because of the DW being still locked down or data being stale.&lt;/p&gt;

&lt;h2 id=&quot;performance-degradation&quot;&gt;Performance degradation&lt;/h2&gt;

&lt;p&gt;Because Aster is a shared resource, and the number of jobs relying on it is increasing day by day, in the past few weeks we’ve experienced significant performance degradation.
This issue is particularly amplified at a specific time of the week, when BI reports are generated. The result is that batch jobs and reports are taking longer and longer to complete. 
This of course affects developers experience and productivity.&lt;/p&gt;

&lt;h2 id=&quot;emr-adoption&quot;&gt;EMR adoption&lt;/h2&gt;

&lt;p&gt;Because of all the nuisances above, there is additional operational time spent to restart failed jobs. Furthermore, when developing a new model, 
most of the time is spent extracting and massaging data, rather than focusing on the actual job logic.&lt;/p&gt;

&lt;p&gt;It’s easy to understand that Aster wasn’t a good candidate anymore for us and that we needed to migrate to a better and more &lt;a href=&quot;https://en.wikipedia.org/wiki/Elasticity_(cloud_computing)&quot;&gt;elastic&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;The solution we were looking for should:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;work with multiple data formats&lt;/li&gt;
  &lt;li&gt;be scalable&lt;/li&gt;
  &lt;li&gt;be owned by the team&lt;/li&gt;
  &lt;li&gt;be easy to integrate with our scheduling solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We didn’t have to look far to find a great candidate to solve our problems: Spark running on &lt;a href=&quot;https://aws.amazon.com/emr/&quot;&gt;AWS EMR (Elastic Map Reduce)&lt;/a&gt;. Amazon EMR provides a managed Hadoop framework that makes it easy, fast, and cost-effective to process vast amounts of data across dynamically scalable Amazon EC2 instances. 
You can also run other popular distributed frameworks such as Apache Spark, HBase, Presto, and Flink in Amazon EMR, and interact with data in other AWS data stores such as Amazon S3 and Amazon DynamoDB.&lt;/p&gt;

&lt;p&gt;A complete list of open source applications (or components) running on AWS ERM can be found &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;AWS EMR also offers a nice SDK to spin a new dynamic EMR cluster, run a job and tear down resources &lt;em&gt;on the fly&lt;/em&gt; and a cost per second billing system so to make the whole platform very cost efficient.&lt;/p&gt;

&lt;p&gt;The last two perks of using AWS EMR are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ec2/spot/&quot;&gt;AWS Spot Instances&lt;/a&gt;: running hardware at a discounted price&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-supported-instance-types.html&quot;&gt;Large variety of hardware&lt;/a&gt;: most of ELT jobs run on commodity hardware, some ML require intensive GPU computation and EMR offers hardware solutions for all of our use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-sundial-emr-integration&quot;&gt;The Sundial EMR Integration&lt;/h2&gt;

&lt;p&gt;Since we were already using Sundial for most of our ETL and ML heavy lifting, we decided to extend the Sundial &lt;code class=&quot;highlighter-rouge&quot;&gt;task_definition&lt;/code&gt; and add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;executable&lt;/code&gt;: the &lt;code class=&quot;highlighter-rouge&quot;&gt;emr_command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Features we’ve implemented are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;running a Spark EMR job on a pre-existing cluster&lt;/li&gt;
  &lt;li&gt;running a Spark EMR job on a new created-on-the-fly cluster (and automatic tear down of resources)&lt;/li&gt;
  &lt;li&gt;choose between &lt;code class=&quot;highlighter-rouge&quot;&gt;on_demand&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;spot&lt;/code&gt; instances&lt;/li&gt;
  &lt;li&gt;live logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next two paragraphs I will go through two Sundial EMR task definition examples: the first is a Spark EMR job running on a pre-existing cluster, the second is the same job but running on a dynamically created cluster instead.&lt;/p&gt;

&lt;h3 id=&quot;running-a-job-on-a-pre-existing-emr-cluster&quot;&gt;Running a job on a pre-existing EMR Cluster&lt;/h3&gt;

&lt;p&gt;Launching an EMR job on a pre-existing cluster is really simple, all that you need are some job details and the &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster_id&lt;/code&gt; where you want the job to run.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;executable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;existing_emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cluster_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;j-123ABC456DEF9&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;job_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MyJobName1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.company.job.spark.core.MainClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3_jar_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3://my-spark-job-release-bucket/my-job-spark-v1-0-0.jar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark_conf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark.driver.extraJavaOptions=-Denvironment=production&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arg1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arg2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3_log_details&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_group_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark-emr-log-group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_stream_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark-emr-log-stream&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other properties are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;class&lt;/em&gt;: the fully qualified main class of the job, e.g. “com.company.job.spark.core.MainClass”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s3_jar_path&lt;/em&gt;: the s3 path to the job jar file e.g “s3://my-spark-job-release-bucket/my-job-spark-v1-0-0.jar”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;spark_conf&lt;/em&gt;: this is a &lt;strong&gt;list&lt;/strong&gt; of attributes that you can pass to the spark driver, like memory or Java Opts (as per above example)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;args&lt;/em&gt;: another list of params that will be passed to the &lt;strong&gt;MainClass&lt;/strong&gt; as arguments (as per above example)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s3_log_details&lt;/em&gt;: Cloudwatch Log Group and Stream names for your job. See &lt;a href=&quot;#emr-logs&quot;&gt;EMR Logs paragraph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;emr-logs&quot;&gt;EMR Logs&lt;/h4&gt;

&lt;p&gt;One nice feature of Sundial is the possibility of viewing jobs’ live logs. While AWS Elastic Container Service (ECS) and Batch natively offer 
a way to access live logs, EMR updates logs only every five minutes on S3 and it cannot be used as feed for live logs. Since there isn’t a straightforward way of fixing this, it is developer’s 
responsibility to implement the code that streams job’s log to &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot;&gt;AWS Cloudwatch Logs&lt;/a&gt;. One way of achieving this is via the &lt;a href=&quot;https://github.com/speedwing/log4j-cloudwatch-appender&quot;&gt;log4j-cloudwatch-appender&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The downside of having jobs running on &lt;em&gt;static&lt;/em&gt; AWS EMR clusters is that you will be paying for it even if no jobs are running. For this reason it would be ideal if we could spin up an EMR cluster &lt;em&gt;on-the-fly&lt;/em&gt;, run a Spark job and then dispose all the resources.&lt;/p&gt;

&lt;p&gt;If you want to know more, well, keep reading!&lt;/p&gt;

&lt;h3 id=&quot;running-a-job-on-a-dynamic-emr-cluster&quot;&gt;Running a job on a dynamic EMR Cluster&lt;/h3&gt;

&lt;p&gt;The Sundial Task definition that uses a dynamic cluster is fairly more complex and gives you some fine grained control when provisioning your cluster. 
At the same time though, if your jobs don’t require very specific configurations (e.g. permissions, aws market type), sensible default options have been provided so to simplify the 
Task Definition where possible.&lt;/p&gt;

&lt;p&gt;Let’s dig into the different sections of the json template.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new_emr_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My Cluster Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;release_label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr-5.11.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;applications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Spark&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3_log_uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3://cluster-log-bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master_instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m4.large&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;instance_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core_instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m4.xlarge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;instance_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_service_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default_emr_service_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EMR_DefaultRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_job_flow_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default_emr_job_flow_role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EMR_EC2_DefaultRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ec2_subnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subnet-a123456b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;visible_to_all_users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The json object name for a &lt;em&gt;dynamic emr cluster&lt;/em&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;new_emr_cluster&lt;/code&gt;. It is composed by the following attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;name&lt;/em&gt;: The name that will appear on the AWS EMR console&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;release_label&lt;/em&gt;: The EMR version of the cluster to create. Each EMR version maps to specific version of the applications that can run in the EMR cluster. Additional details are available on the &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html&quot;&gt;AWS EMR components page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;applications&lt;/em&gt;: The list of applications to launch on the cluster. For a comprehensive list of available applications, visit the &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html&quot;&gt;AWS EMR components page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s3_log_uri&lt;/em&gt;: The s3 bucket where the EMR cluster put their log files. These are both cluster logs as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; of the EMR job&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;master_instance&lt;/em&gt;: The master node hardware details (see below for more details.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;core_instance&lt;/em&gt;: The core node hardware details (see below for more details.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;task_instance&lt;/em&gt;: The task node hardware details (see below for more details.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;emr_service_role&lt;/em&gt;: The IAM role that Amazon EMR assumes to access AWS resources on your behalf. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-iam-roles.html&quot;&gt;Configure IAM Roles for Amazon EMR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;emr_job_flow_role&lt;/em&gt;: (Also called instance profile and EC2 role.) Accepts an instance profile that’s associated with the role that you want to use. All EC2 instances in the cluster assume this role. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-what-is-emr.html&quot;&gt;Create and Use IAM Roles for Amazon EMR&lt;/a&gt; in the Amazon EMR Management Guide&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ec2_subnet&lt;/em&gt;: The subnet where to spin the EMR cluster. (Optional if the account has only the standard VPC)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;visible_to_all_users&lt;/em&gt;: Indicates whether the instances in the cluster are visible to all IAM users in the AWS account. If you specify true, all IAM users can view and (if they have permissions) manage the instances. If you specify false, only the IAM user that created the cluster can view and manage it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;master-core-and-task-instances&quot;&gt;Master, core and task instances&lt;/h4&gt;

&lt;p&gt;An EMR cluster is composed by exactly one master instance, at least one core instance and any number of tasks instances.&lt;/p&gt;

&lt;p&gt;A detailed explanation of the different instance types is available in the &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-instances.html&quot;&gt;AWS EMR plan instances page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For simplicity I’ll paste a snippet of the AWS official documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;master node: The master node manages the cluster and typically runs master components of distributed applications. For example, the master node runs the YARN ResourceManager service to manage resources for applications, as well as the HDFS NameNode service. It also tracks the status of jobs submitted to the cluster and monitors the health of the instance groups. Because there is only one master node, the instance group or instance fleet consists of a single EC2 instance.&lt;/li&gt;
    &lt;li&gt;core node: Core nodes are managed by the master node. Core nodes run the Data Node daemon to coordinate data storage as part of the Hadoop Distributed File System (HDFS). They also run the Task Tracker daemon and perform other parallel computation tasks on data that installed applications require.&lt;/li&gt;
    &lt;li&gt;task node: Task nodes are optional. You can use them to add power to perform parallel computation tasks on data, such as Hadoop MapReduce tasks and Spark executors. Task nodes don’t run the Data Node daemon, nor do they store data in HDFS.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The json below describes configuration details of an EMR master instance:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master_instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emr_instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;m4.large&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;instance_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on_demand&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that there can only be exactly one master node, if a different values is specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_count&lt;/code&gt;, it is ignored. For other instance group types the 
value &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_count&lt;/code&gt; represents, as the name says, the number of EC2 instances to launch for that instance type.&lt;/p&gt;

&lt;p&gt;Other attributes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;emr_instance_type&lt;/em&gt;: the EC2 instance type to use when launching the EMR instance&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;aws_market&lt;/em&gt;: the marketplace to provision instances for this group. It can be either &lt;code class=&quot;highlighter-rouge&quot;&gt;on_demand&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;spot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of a EMR instance using spot is:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_market&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bid_price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.07&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;bid_price&lt;/code&gt; is the Spot bid price in dollars.&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Because of some AWS EMR implementation details, Sundial has two major limitations when it comes to EMR job scheduling.&lt;/p&gt;

&lt;p&gt;The first limitation is that Sundial is not able to stop EMR jobs running on pre-existing clusters. Since jobs on the EMR cluster are scheduled via &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; and since 
AWS did not build any api on top of it, once a job is scheduled on an existing EMR cluster, in order to kill it, it would be required to ssh on the EC2 instance where the master node is running, query &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; so to find out the
correct application id and issue a yarn kill command. We decided to not implement this feature because it would have greatly over complicated the job definition.
Jobs running on dynamic cluster are affected by the same issue. We’ve managed to still implement this feature by simply killing the whole EMR cluster.&lt;/p&gt;

&lt;p&gt;The second limitation is about live logs. As previously mentioned live logs are not implemented out of the box. Developers require to stream logs to Cloudwatch Logs and set log group and log name in the task definition.&lt;/p&gt;</content><author><name>Giovanni Gargiulo</name></author><category term="aws" /><category term="data" /><category term="sundial" /><category term="etl" /><category term="scheduling" /><category term="machine learning" /><summary>AWS Elastic Map Reduce on Sundial</summary></entry><entry><title>Revitalize Gilt City’s Order Processing with Serverless Architecture</title><link href="http://tech.hbc.com/2018-01-03-instant-voucher-serverless.html" rel="alternate" type="text/html" title="Revitalize Gilt City's Order Processing with Serverless Architecture" /><published>2018-01-03T00:00:00-05:00</published><updated>2018-01-03T00:00:00-05:00</updated><id>http://tech.hbc.com/instant-voucher-serverless</id><content type="html" xml:base="http://tech.hbc.com/2018-01-03-instant-voucher-serverless.html">&lt;h1 id=&quot;instant-vouchers-initiative&quot;&gt;Instant Vouchers Initiative&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gilt.com/city/&quot;&gt;Gilt City&lt;/a&gt; is Gilt’s high-end voucher portal that offers localised discounts on exclusive lifestyle experiences in dining, entertainment, beauty, fitness etc to our 3.4 million members across 13 U.S. cities. Gilt City’s legacy order processing backend is a scheduled-job based architecture in which functionality such as fraud scan, payment authorisation, order fulfillment are assigned to independent jobs that process orders in batches according to order status. Though this architecture can scale to meet peak time workload and provides some level of resilience (failed orders are retried the next time the job runs), it inevitably includes some idle time i.e. wait for the next job to pick up an order from the previous job. The resulting average processing time could add up to 15 minutes.&lt;/p&gt;

&lt;p&gt;Since many of Gilt City’s offers are of an impulsive nature and time-sensitive, long processing time becomes a clear bottleneck to user experience. Team Marconi in Gilt have been driving the work on the Instant Vouchers Initiative for the past few months ago, in an effort to re-architect the backend of order processing using the latest cloud technologies. We believe that by reducing this wait time, it will significantly boost overall shopping experience and enable immediate use of vouchers and, in turn, it allows for new features such as location-based push notifications.&lt;/p&gt;

&lt;h1 id=&quot;an-event-driven-serverless-architecture&quot;&gt;An Event Driven, Serverless Architecture&lt;/h1&gt;

&lt;p&gt;It is never easy to rewrite (or replace) a mission critical system. In our case, we have to keep the existing monolithic Ruby on Rails app running while spinning up a new pipeline. We took the strangler pattern (see this &lt;a href=&quot;https://martinfowler.com/bliki/StranglerApplication.html&quot;&gt;Martin Fowler article&lt;/a&gt; for an explanation) and built a new API layer for processing individual orders around the existing batch-processing, job-based system in the same Rails app. With this approach, the legacy job-based system gradually receives less traffic and becomes a fallback safety net to catch and retry failed orders from the instant processing pipeline.&lt;/p&gt;

&lt;p&gt;The new instant order pipeline starts with the &lt;strong&gt;checkout system&lt;/strong&gt; publishing a notification to an SNS topic whenever it creates an order object. An order notification contains the order ID to allow event subscribers to look up the order object in the order key-value store. An AWS Lambda application &lt;strong&gt;order-notification-dispatcher&lt;/strong&gt; subscribes to this SNS topic and kicks off the processing by invoking an AWS Step Functions resource. See below a simplified architecture diagram of the order processing system.&lt;/p&gt;

&lt;p&gt;The architecture leverages Lambda and Step Functions from the AWS Serverless suite to build several key components. At HBC, different teams have started embracing a serverless paradigm to build production applications. There are many benefits of adopting a serverless paradigm, such as abstraction from infrastructure, out-of-the-box scalability, and an on-demand cost model just to name a few. Compared to the alternative of building and maintaining an array of EC2/container instances, a serverless architecture goes a step beyond microservices to allow an even faster development iteration cycle. With the use of Step Functions as an orchestration engine, it is much easier to facilitate interaction between Lambda applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2FYlarr.png&quot; alt=&quot;alt text&quot; title=&quot;Instant Order Processing Architecture&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;aws-step-functions-for-lambda-orchestration&quot;&gt;AWS Step Functions for Lambda Orchestration&lt;/h1&gt;

&lt;p&gt;As mentioned above, AWS Step Functions is an orchestration service that makes it easy to coordinate stateless Lambda applications by establishing a specification to transition application states. Behind the scenes, it is depicted as a state machine constructed with the JSON-based &lt;a href=&quot;https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html&quot;&gt;Amazon States Language&lt;/a&gt;. See below a sample execution from the order-processing step function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RWakgNC.png&quot; alt=&quot;alt text&quot; title=&quot;An successful Step Function execution example&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inside-step-functions&quot;&gt;Inside Step Functions&lt;/h3&gt;

&lt;p&gt;At the top level the specification includes various types of &lt;a href=&quot;https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-states.html&quot;&gt;States&lt;/a&gt;, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Choice&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Wait&lt;/code&gt;, to be used to compose simple business logic to transition application state. Inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; State, an AWS Lambda ARN can be specified to be invoked. The output of the Lambda will be directed as input to next State. This is an excerpt from the order-processing state machine:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Comment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Order processing state machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StartAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ChangeOrderStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;States&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ChangeOrderStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:start-order-processing:2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudScan&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudScan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:fraud-scan:2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IsFraudOrder&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IsFraudOrder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cleared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AuthorizePayment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fraud&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudOrderTerminal&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AuthorizePayment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:authorize-payments:2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WarehouseChoice&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudOrderTerminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is the ending state for a fraud order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;End&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;polling-and-retry-on-errors&quot;&gt;Polling and Retry on Errors&lt;/h3&gt;

&lt;p&gt;A serverless paradigm fits really well in situations where computation completes within a short time (ideally seconds). However, sometimes we still need to run a task that will take slightly longer. For example, in our pipeline, we need to keep polling a service endpoint for a fraud-scan result, since it is an async process. We implemented this by defining a retry counter &lt;code class=&quot;highlighter-rouge&quot;&gt;get_fraud_status_retries&lt;/code&gt; within a &lt;code class=&quot;highlighter-rouge&quot;&gt;Choice&lt;/code&gt; state and set a max attempt count of 60 to terminate retries.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IsFraudOrder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cleared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AuthorizePayment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.fraud_verdict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fraud&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudOrderTerminal&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.get_fraud_status_retries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NumericLessThanEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudScanWait&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.get_fraud_status_retries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NumericGreaterThan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FraudStatusUnavailableTerminal&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is also critical to make cloud applications resilient to errors such as network timeouts. Step Functions provides error handling to allow catching/retrying of some predefined errors as well as customised Lambda error types. You can specify different retry strategies with properties such as &lt;code class=&quot;highlighter-rouge&quot;&gt;MaxAttempts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BackoffRate&lt;/code&gt;. See the below example where we implemented a retry mechanism for different errors in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; state to create redemption codes:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CreateRedemptionCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:1234567890:function:create-redemption-code:3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FulfillElectronicOrder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Retry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ErrorEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GatewayTimeoutError&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IntervalSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MaxAttempts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Catch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ErrorEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;States.ALL&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CatchMissingRedemptionCode&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;immutable-deployment--partial-rollout&quot;&gt;Immutable Deployment &amp;amp; Partial Rollout&lt;/h1&gt;

&lt;p&gt;Deploying a mission critical service to a production environment is always a nervous process. At HBC we advocate immutable deployments whenever possible and leverage A/B testing to help us roll out new features to customers in a gradual manner. In a serverless world, it is a little different, since most of the infrastructure management is abstracted away.&lt;/p&gt;

&lt;h3 id=&quot;lambda-versioning&quot;&gt;Lambda Versioning&lt;/h3&gt;
&lt;p&gt;AWS Lambda’s &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html&quot;&gt;versioning feature&lt;/a&gt; provides the ability to make Lambda functions immutable by taking a snapshot of the function (aka publishing a version). We really like this, since it ensures the Lambda function artifact as well as environment variables remain immutable once published. Note that in the above code snippets of state machine JSON, the ARN specified for each Lambda resource is Lambda version ARN instead of function ARN. We also use Lambda’s &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html&quot;&gt;aliasing feature&lt;/a&gt; to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt; alias mapped to the current production version, with immutable environment variables:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Rj7UeTy.png&quot; alt=&quot;alt text&quot; title=&quot;Lambda Alias Mapping&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With aliasing we can easily roll back to a previous Lambda version in case of an unexpected production failure.&lt;/p&gt;

&lt;h3 id=&quot;bluegreen-stacks&quot;&gt;Blue/Green Stacks&lt;/h3&gt;

&lt;p&gt;So we have immutable Lambda functions, but we still want to make our Step Functions (SF) immutable. We decided to create a new SF resource every time we release it, meanwhile the old SF resource remains unchanged. Since AWS does not currently provide a versioning feature for Step Functions, we included semantic versioning in the SF name e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;order-processing-v0.0.6&lt;/code&gt;. With both new and old versions (including historical SFs) we are able to apply a blue/green deployment and rollback procedure.&lt;/p&gt;

&lt;p&gt;To route orders to either blue/green stack, we make the &lt;strong&gt;order-notification-dispatcher&lt;/strong&gt; Lambda the de facto router by providing blue/green versions of SF as its &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/env_variables.html&quot;&gt;environment variables&lt;/a&gt;. Here is the Node.js code to read the stack environment variables:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineBlueVer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STATE_MACHINE_BLUE_VER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineGreenVer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STATE_MACHINE_GREEN_VER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With fetched state machine stack version we can compose Step Function ARN with predefined format, then start a new execution with AWS sdk Step Function api:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Read from environment vars&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preProcessingStepFunctionPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachineVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stateMachineArn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StepFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startExecution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;partial-rollout&quot;&gt;Partial Rollout&lt;/h3&gt;

&lt;p&gt;We make the &lt;strong&gt;order-notification-dispatcher&lt;/strong&gt; query our a/b test engine to have simple routing logic for each order notification, so that it can shift traffic to either the blue/green Step Function stack according to test/control group the order falls into. Also note that AWS recently released a nice &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html&quot;&gt;traffic shifting&lt;/a&gt; feature for Lambda applications. However, we didn’t use it as our a/b test engine provides finer-grain control which allows us to target certain groups such as HBC’s internal employees. Here is a diagram depicting the partial rollout process for new Step Function resources:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZSyvoJ1.png&quot; alt=&quot;alt text&quot; title=&quot;Partial Rollout Process&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;h3 id=&quot;what-we-have-achieved&quot;&gt;What We Have Achieved&lt;/h3&gt;

&lt;p&gt;As of today all of Gilt City’s orders have been directed to the instant processing pipeline, which shortens the majority of orders’ processing time from over 15 minutes to a few seconds. We are looking to expand the system to take over more workload including physical products to bring the instant order user experience to a wider customer base.&lt;/p&gt;

&lt;h3 id=&quot;step-functions-limitations&quot;&gt;Step Functions Limitations&lt;/h3&gt;

&lt;p&gt;From our development exerience using AWS Step Functions we discovered some limitations of this service. First of all, it lacks of a feature like a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; state which would take a list of input objects and transform it to another list of result objects. A possible solution could be allowing invocation of a sub SF multiple times. In our case, an order object can be split into multiple order objects depending on the items in the original order. Unfortuntely SF does not offer a State type that can map a dynamic number of elements. We eventually made the workaround by creating an &lt;strong&gt;order-pre-processing&lt;/strong&gt; SF and make it invoke the &lt;strong&gt;order-processing&lt;/strong&gt; SF multiple times to process those ‘split’ orders.&lt;/p&gt;

&lt;p&gt;Secondly, we hope AWS can provide versioning/aliasing for Step Functions so we can gain immutability out of the box instead of forcing immutability on our side. Any support for blue/green deployment would be even better.&lt;/p&gt;

&lt;p&gt;Also, we expect AWS to provide better filtering/searching abilities on the Step Functions dashboard so we can gain some fundamental data analytics from historical executions. This could be obtained by declaring some “searchable” fields and relative types in the SF definition.&lt;/p&gt;

&lt;p&gt;In the context of AWS Enterprise Support, we (Team Marconi) had a productive meeting directly with the AWS Step Functions Product Manager during which we have suggested our list of improvements. It was gratifying to hear that most of these are already or will be included in their development roadmap.&lt;/p&gt;

&lt;h3 id=&quot;future-work&quot;&gt;Future Work&lt;/h3&gt;
&lt;p&gt;From an architecture perspective, we are trying to standardize a continous delivery process for our serverless components. At the moment, what we have is “poor man’s CI/CD” - some bash/node scripts which use AWS CloudFormation SDK to provision resources. There are various tools available either from AWS or the serverless community such as &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/documentation/codepipeline/&quot;&gt;CodePipeline&lt;/a&gt; that we are trying to integrate with to provide a frictionless path to production.&lt;/p&gt;</content><author><name>Liyu Ma</name></author><category term="aws" /><category term="serverless" /><category term="lambda" /><category term="step function" /><category term="gilt city" /><category term="order processing" /><summary>Instant Vouchers Initiative</summary></entry><entry><title>Presentations we love: 2017</title><link href="http://tech.hbc.com/2017-12-30-presentations-we-love.html" rel="alternate" type="text/html" title="Presentations we love: 2017" /><published>2017-12-30T00:00:00-05:00</published><updated>2017-12-30T00:00:00-05:00</updated><id>http://tech.hbc.com/presentations-we-love</id><content type="html" xml:base="http://tech.hbc.com/2017-12-30-presentations-we-love.html">&lt;p&gt;2017 was a year of growth and learning at HBC Tech. Our organization embraced new technologies and new ways of building application software.&lt;/p&gt;

&lt;p&gt;As the year comes to an end, let’s recognize some notable technical presentations from 2017.&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-project-update&quot;&gt;Kubernetes Project update&lt;/h2&gt;
&lt;p&gt;Kelsey Hightower (&lt;a href=&quot;https://twitter.com/kelseyhightower&quot;&gt;@kelseyhightower&lt;/a&gt;) at KubeCon 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=07jq-5VbBVQ&quot; title=&quot;Kubernetes Project update&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/07jq-5VbBVQ/0.jpg&quot; alt=&quot;Kelsey Hightower video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;production-designing-for-testability&quot;&gt;Production: Designing for testability&lt;/h2&gt;
&lt;p&gt;Mike Bryzek (&lt;a href=&quot;https://twitter.com/mbryzek&quot;&gt;@mbryzek&lt;/a&gt;) at QCon New York 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=z-ATZTUgaAo&quot; title=&quot;Production: Designing for testability&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/z-ATZTUgaAo/0.jpg&quot; alt=&quot;Mike Bryzek video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-microservices-contracts--compatibility&quot;&gt;Streaming Microservices: Contracts &amp;amp; Compatibility&lt;/h2&gt;
&lt;p&gt;Gwen Shapira (&lt;a href=&quot;https://twitter.com/gwenshap&quot;&gt;@gwenshap&lt;/a&gt;) at QCon New York 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/contracts-streaming-microservices&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2017/gwen-shapira-contracts-and-compatibility-480.png&quot; alt=&quot;contracts-streaming-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;spinnaker-and-the-culture-behind-the-tech&quot;&gt;Spinnaker and the Culture Behind the Tech&lt;/h2&gt;
&lt;p&gt;Dianne Marsh (&lt;a href=&quot;https://twitter.com/dmarsh&quot;&gt;@dmarsh&lt;/a&gt;) at KubeCon 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=mfFtfaulCtg&quot; title=&quot;Spinnaker and the culture behind the tech&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/mfFtfaulCtg/0.jpg&quot; alt=&quot;Dianne Marsh video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;embracing-change-without-breaking-the-world&quot;&gt;Embracing Change without breaking the world&lt;/h2&gt;
&lt;p&gt;Jim Flanagan and Kyle Thomson at AWS re:invent 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=kJq81Y7OEx4&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/kJq81Y7OEx4/0.jpg&quot; alt=&quot;AWS Embracing Change&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;developing-applications-on-aws-in-the-jvm&quot;&gt;Developing Applications on AWS in the JVM&lt;/h2&gt;
&lt;p&gt;Kyle Thomson (&lt;a href=&quot;https://github.com/kiiadi&quot;&gt;@kiiadi&lt;/a&gt;) at AWS re:invent 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=byRois3s5Yc&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/byRois3s5Yc/0.jpg&quot; alt=&quot;AWS JVM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;chaos-engineering-at-netflix&quot;&gt;Chaos Engineering at Netflix&lt;/h2&gt;
&lt;p&gt;Nora Jones (&lt;a href=&quot;https://twitter.com/nora_js&quot;&gt;@nora_js&lt;/a&gt;) at AWS re:invent 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=LaKGx0dAUlo&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/LaKGx0dAUlo/0.jpg&quot; alt=&quot;Chaos Engineering at Netflix&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;apibuilder&quot;&gt;apibuilder&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at Scala Up North 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/api-builder-scala-up-north-2017&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2017/sean-sullivan-apibuilder-july-2017-480.png&quot; alt=&quot;apibuilder-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;managing-data-in-microservices&quot;&gt;Managing Data in Microservices&lt;/h2&gt;
&lt;p&gt;Randy Shoup (&lt;a href=&quot;https://twitter.com/randyshoup&quot;&gt;@randyshoup&lt;/a&gt;) at QCon New York 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=E8-e-3fRHBw&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/E8-e-3fRHBw/0.jpg&quot; alt=&quot;Randy Shoup - Managing Data&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;crushing-tech-debt-through-automation-at-coinbase&quot;&gt;Crushing Tech Debt Through Automation at Coinbase&lt;/h2&gt;
&lt;p&gt;Rob Witoff  (&lt;a href=&quot;https://twitter.com/rwitoff&quot;&gt;@rwitoff&lt;/a&gt;) at QCon London 2017&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=KaK2lAj1B-Q&quot; title=&quot;Video Title&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/KaK2lAj1B-Q/0.jpg&quot; alt=&quot;Rob Witoff - Tech Debt&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;gilts-ios-codebase-evolution&quot;&gt;Gilt’s iOS codebase evolution&lt;/h2&gt;
&lt;p&gt;Evan Maloney (&lt;a href=&quot;https://twitter.com/_emaloney_&quot;&gt;@_emaloney_&lt;/a&gt;) at the Brooklyn Swift Developers Meetup&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/217236459&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2017/evan-maloney-ios-swift-gilt-2017-480.png&quot; alt=&quot;evan-maloney-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;apache-struts-and-the-equifax-data-breach&quot;&gt;Apache Struts and the Equifax Data Breach&lt;/h2&gt;
&lt;p&gt;Sean Sullivan (&lt;a href=&quot;https://twitter.com/tinyrobots&quot;&gt;@tinyrobots&lt;/a&gt;) at the Portland Java User Group&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sullis/apache-struts-and-the-equifax-data-breach&quot;&gt;&lt;img src=&quot;./assets/images/presentations-we-love-2017/sean-sullivan-struts-and-equifax-october-2017-480.png&quot; alt=&quot;struts-equifax-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;promcon-2017&quot;&gt;Promcon 2017&lt;/h2&gt;
&lt;p&gt;Giovanni Gargiulo (&lt;a href=&quot;https://twitter.com/giannigar&quot;&gt;@giannigar&lt;/a&gt;) at Promcon 2017 (Munich)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=btnXuFLcpS8&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/btnXuFLcpS8/0.jpg&quot; alt=&quot;giovanni-gargiulo-image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>HBC Tech</name></author><category term="community" /><category term="conferences" /><category term="qcon" /><category term="aws" /><category term="cloud" /><category term="2017" /><summary>2017 was a year of growth and learning at HBC Tech. Our organization embraced new technologies and new ways of building application software.</summary></entry></feed>
